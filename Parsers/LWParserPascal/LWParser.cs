// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  BLUEGENE
// DateTime: 23.11.2015 21:07:15
// UserName: MikhailoMMX
// Input file <LWParser.y - 23.11.2015 21:07:14>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AspectCore;

namespace LWParser
{
public enum Tokens {error=2,EOF=3,LetterDigits=4,Sign=5,tkCodeOpen=6,
    tkDefs=7,tkClassVisModifier=8,tkMethod=9,tkDirective=10,tkDirectiveHeader=11,tkInitFinal=12,
    tkImpl=13,_class=14,_interface=15,_record=16,_Ropen=17,_Rclose=18,
    _end=19,_Sopen=20,_Sclose=21,_Dot=22,_type=23,_Scolon=24};

public partial class ValueType
{ 
  public SourceEntity type_SourceEntity;
  public PAS_TreeNode type_PAS_TreeNode;
  public Token type_Token;
  public Block type_Block;
  public Attribute type_Attribute;
  public Field type_Field;
  public Class type_Class;
  public Method type_Method;
  public MethodHeader type_MethodHeader;
  public ClassMethod type_ClassMethod;
  public Defs type_Defs;
  public InitFinal type_InitFinal;
  public SourceEntityUniformSet type_SourceEntityUniformSet;

}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[215];
  private static State[] states = new State[236];
  private static string[] nonTerms = new string[] {
      "Program", "_ANY7", "tkClassOpen", "_ANY6", "_ANY", "_Defs_set", "_ClassMethodBody_set", 
      "_MethodBody_set", "_Class_set", "tkInterf", "_Program_set", "Params", 
      "Block", "Attribute", "Tk", "Tk2", "ProgramNode", "ClassNode", "InterfacePart", 
      "InterfNode", "Field", "Class", "Method", "MethodHeader", "MethodBody", 
      "MethodLocals", "ClassMethod", "ClassMethodBody", "Defs", "FieldOrClass", 
      "Directive", "DirectiveHeader", "InitFinal", "CodeToken", "_ANY8", "_ANY9", 
      "_ANY10", "_", "_11", "_12", "_13", "_14", "__ANY8_list", "__class_opt", 
      "_InterfNode_list", "_Tk2_list", "_Params_opt", "_DirectiveHeader_list", 
      "__ANY9_list", "_CodeToken_list", "$accept", };

  static Parser() {
    states[0] = new State(-71,new int[]{-1,1,-11,3}, new int[]{1,0});
    states[1] = new State(new int[]{3,2},new int[]{}, new int[]{1,1});
    states[2] = new State(-1,new int[]{}, new int[]{1,2});
    states[3] = new State(new int[]{6,31,19,55,7,153,23,154,4,116,5,117,17,85,22,119,14,120,12,200,15,233,20,156,2,235,9,-201},new int[]{-41,4,-17,28,-13,29,-29,57,-42,58,-21,187,-15,114,-12,118,-23,188,-24,189,-44,198,-33,199,-19,223,-10,224,-14,234}, new int[]{88,1});
    states[4] = new State(-199,new int[]{-43,5}, new int[]{88,2});
    states[5] = new State(new int[]{4,7,5,8,6,9,7,10,8,11,9,12,10,13,11,14,12,15,13,16,14,17,15,18,16,19,17,20,18,21,19,22,20,23,21,24,22,25,23,26,24,27,3,-88},new int[]{-35,6}, new int[]{88,3});
    states[6] = new State(-200,new int[]{}, new int[]{200,2});
    states[7] = new State(-127,new int[]{}, new int[]{127,1});
    states[8] = new State(-128,new int[]{}, new int[]{128,1});
    states[9] = new State(-129,new int[]{}, new int[]{129,1});
    states[10] = new State(-130,new int[]{}, new int[]{130,1});
    states[11] = new State(-131,new int[]{}, new int[]{131,1});
    states[12] = new State(-132,new int[]{}, new int[]{132,1});
    states[13] = new State(-133,new int[]{}, new int[]{133,1});
    states[14] = new State(-134,new int[]{}, new int[]{134,1});
    states[15] = new State(-135,new int[]{}, new int[]{135,1});
    states[16] = new State(-136,new int[]{}, new int[]{136,1});
    states[17] = new State(-137,new int[]{}, new int[]{137,1});
    states[18] = new State(-138,new int[]{}, new int[]{138,1});
    states[19] = new State(-139,new int[]{}, new int[]{139,1});
    states[20] = new State(-140,new int[]{}, new int[]{140,1});
    states[21] = new State(-141,new int[]{}, new int[]{141,1});
    states[22] = new State(-142,new int[]{}, new int[]{142,1});
    states[23] = new State(-143,new int[]{}, new int[]{143,1});
    states[24] = new State(-144,new int[]{}, new int[]{144,1});
    states[25] = new State(-145,new int[]{}, new int[]{145,1});
    states[26] = new State(-146,new int[]{}, new int[]{146,1});
    states[27] = new State(-147,new int[]{}, new int[]{147,1});
    states[28] = new State(-72,new int[]{}, new int[]{72,2});
    states[29] = new State(new int[]{22,30},new int[]{}, new int[]{195,1});
    states[30] = new State(-195,new int[]{}, new int[]{195,2});
    states[31] = new State(-189,new int[]{-39,32}, new int[]{74,1});
    states[32] = new State(new int[]{19,33,4,36,5,37,7,38,8,39,9,40,10,41,11,42,12,43,13,44,14,45,15,46,16,47,17,48,18,49,20,50,21,51,22,52,23,53,24,54,6,31},new int[]{-4,34,-13,35}, new int[]{74,2});
    states[33] = new State(-74,new int[]{}, new int[]{74,3});
    states[34] = new State(-190,new int[]{}, new int[]{190,2});
    states[35] = new State(-191,new int[]{}, new int[]{191,2});
    states[36] = new State(-24,new int[]{}, new int[]{24,1});
    states[37] = new State(-25,new int[]{}, new int[]{25,1});
    states[38] = new State(-26,new int[]{}, new int[]{26,1});
    states[39] = new State(-27,new int[]{}, new int[]{27,1});
    states[40] = new State(-28,new int[]{}, new int[]{28,1});
    states[41] = new State(-29,new int[]{}, new int[]{29,1});
    states[42] = new State(-30,new int[]{}, new int[]{30,1});
    states[43] = new State(-31,new int[]{}, new int[]{31,1});
    states[44] = new State(-32,new int[]{}, new int[]{32,1});
    states[45] = new State(-33,new int[]{}, new int[]{33,1});
    states[46] = new State(-34,new int[]{}, new int[]{34,1});
    states[47] = new State(-35,new int[]{}, new int[]{35,1});
    states[48] = new State(-36,new int[]{}, new int[]{36,1});
    states[49] = new State(-37,new int[]{}, new int[]{37,1});
    states[50] = new State(-38,new int[]{}, new int[]{38,1});
    states[51] = new State(-39,new int[]{}, new int[]{39,1});
    states[52] = new State(-40,new int[]{}, new int[]{40,1});
    states[53] = new State(-41,new int[]{}, new int[]{41,1});
    states[54] = new State(-42,new int[]{}, new int[]{42,1});
    states[55] = new State(new int[]{22,56},new int[]{}, new int[]{196,1});
    states[56] = new State(-196,new int[]{}, new int[]{196,2});
    states[57] = new State(-89,new int[]{}, new int[]{89,1});
    states[58] = new State(new int[]{4,116,5,117,17,85,22,119},new int[]{-6,59,-30,186,-21,61,-15,62,-12,118,-22,185}, new int[]{119,1});
    states[59] = new State(new int[]{4,116,5,117,17,85,22,119,6,-119,19,-119,7,-119,23,-119,14,-119,12,-119,15,-119,20,-119,2,-119,9,-119,13,-119},new int[]{-30,60,-21,61,-15,62,-12,118,-22,185}, new int[]{119,2});
    states[60] = new State(-63,new int[]{}, new int[]{63,2});
    states[61] = new State(-120,new int[]{}, new int[]{120,1});
    states[62] = new State(-205,new int[]{-46,63}, new int[]{107,1,108,1});
    states[63] = new State(new int[]{24,64,14,182,15,183,16,184,4,82,5,83,17,85,22,109,9,110,23,111,20,112,21,113},new int[]{-3,65,-16,81,-12,84}, new int[]{107,2,108,2});
    states[64] = new State(-107,new int[]{}, new int[]{107,3});
    states[65] = new State(new int[]{17,85,19,-207,8,-207,14,-207,20,-207,2,-207,9,-207,4,-207,5,-207,22,-207},new int[]{-47,66,-12,181}, new int[]{108,3});
    states[66] = new State(-68,new int[]{-9,67}, new int[]{108,4});
    states[67] = new State(new int[]{19,68,8,71,14,120,20,156,2,180,9,-201,4,-201,5,-201,17,-201,22,-201},new int[]{-18,70,-44,72,-27,121,-24,122,-14,155}, new int[]{108,5});
    states[68] = new State(new int[]{24,69},new int[]{}, new int[]{108,6});
    states[69] = new State(-108,new int[]{}, new int[]{108,7});
    states[70] = new State(-69,new int[]{}, new int[]{69,2});
    states[71] = new State(-96,new int[]{}, new int[]{96,1});
    states[72] = new State(new int[]{9,74,4,116,5,117,17,85,22,119},new int[]{-21,73,-15,114,-12,118}, new int[]{97,1,110,1});
    states[73] = new State(-97,new int[]{}, new int[]{97,2});
    states[74] = new State(-205,new int[]{-46,75}, new int[]{110,2});
    states[75] = new State(new int[]{24,76,4,82,5,83,17,85,22,109,9,110,23,111,20,112,21,113},new int[]{-16,81,-12,84}, new int[]{110,3});
    states[76] = new State(-209,new int[]{-48,77}, new int[]{110,4});
    states[77] = new State(new int[]{11,79,10,-110,6,-110,7,-110,23,-110,14,-110,9,-110,19,-110,8,-110,20,-110,2,-110,4,-110,5,-110,17,-110,22,-110,13,-110},new int[]{-32,78}, new int[]{110,5});
    states[78] = new State(-210,new int[]{}, new int[]{210,2});
    states[79] = new State(new int[]{24,80},new int[]{}, new int[]{123,1});
    states[80] = new State(-123,new int[]{}, new int[]{123,2});
    states[81] = new State(-206,new int[]{}, new int[]{206,2});
    states[82] = new State(-80,new int[]{}, new int[]{80,1});
    states[83] = new State(-81,new int[]{}, new int[]{81,1});
    states[84] = new State(-82,new int[]{}, new int[]{82,1});
    states[85] = new State(-186,new int[]{-38,86}, new int[]{73,1});
    states[86] = new State(new int[]{18,87,4,90,5,91,6,92,7,93,8,94,9,95,10,96,11,97,12,98,13,99,14,100,15,101,16,102,19,103,20,104,21,105,22,106,23,107,24,108,17,85},new int[]{-5,88,-12,89}, new int[]{73,2});
    states[87] = new State(-73,new int[]{}, new int[]{73,3});
    states[88] = new State(-187,new int[]{}, new int[]{187,2});
    states[89] = new State(-188,new int[]{}, new int[]{188,2});
    states[90] = new State(-43,new int[]{}, new int[]{43,1});
    states[91] = new State(-44,new int[]{}, new int[]{44,1});
    states[92] = new State(-45,new int[]{}, new int[]{45,1});
    states[93] = new State(-46,new int[]{}, new int[]{46,1});
    states[94] = new State(-47,new int[]{}, new int[]{47,1});
    states[95] = new State(-48,new int[]{}, new int[]{48,1});
    states[96] = new State(-49,new int[]{}, new int[]{49,1});
    states[97] = new State(-50,new int[]{}, new int[]{50,1});
    states[98] = new State(-51,new int[]{}, new int[]{51,1});
    states[99] = new State(-52,new int[]{}, new int[]{52,1});
    states[100] = new State(-53,new int[]{}, new int[]{53,1});
    states[101] = new State(-54,new int[]{}, new int[]{54,1});
    states[102] = new State(-55,new int[]{}, new int[]{55,1});
    states[103] = new State(-56,new int[]{}, new int[]{56,1});
    states[104] = new State(-57,new int[]{}, new int[]{57,1});
    states[105] = new State(-58,new int[]{}, new int[]{58,1});
    states[106] = new State(-59,new int[]{}, new int[]{59,1});
    states[107] = new State(-60,new int[]{}, new int[]{60,1});
    states[108] = new State(-61,new int[]{}, new int[]{61,1});
    states[109] = new State(-83,new int[]{}, new int[]{83,1});
    states[110] = new State(-84,new int[]{}, new int[]{84,1});
    states[111] = new State(-85,new int[]{}, new int[]{85,1});
    states[112] = new State(-86,new int[]{}, new int[]{86,1});
    states[113] = new State(-87,new int[]{}, new int[]{87,1});
    states[114] = new State(-205,new int[]{-46,115}, new int[]{107,1});
    states[115] = new State(new int[]{24,64,4,82,5,83,17,85,22,109,9,110,23,111,20,112,21,113},new int[]{-16,81,-12,84}, new int[]{107,2});
    states[116] = new State(-76,new int[]{}, new int[]{76,1});
    states[117] = new State(-77,new int[]{}, new int[]{77,1});
    states[118] = new State(-78,new int[]{}, new int[]{78,1});
    states[119] = new State(-79,new int[]{}, new int[]{79,1});
    states[120] = new State(-202,new int[]{}, new int[]{202,1});
    states[121] = new State(-98,new int[]{}, new int[]{98,1});
    states[122] = new State(new int[]{10,125,19,-116,8,-116,14,-116,20,-116,2,-116,9,-116,4,-116,5,-116,17,-116,22,-116,6,-64,7,-64,23,-64},new int[]{-28,123,-31,124,-7,149}, new int[]{115,1});
    states[123] = new State(-115,new int[]{}, new int[]{115,2});
    states[124] = new State(-117,new int[]{}, new int[]{117,1});
    states[125] = new State(-211,new int[]{-49,126}, new int[]{122,1});
    states[126] = new State(new int[]{24,127,4,129,5,130,6,131,7,132,8,133,9,134,10,135,11,136,12,137,13,138,14,139,15,140,16,141,17,142,18,143,19,144,20,145,21,146,22,147,23,148},new int[]{-36,128}, new int[]{122,2});
    states[127] = new State(-122,new int[]{}, new int[]{122,3});
    states[128] = new State(-212,new int[]{}, new int[]{212,2});
    states[129] = new State(-148,new int[]{}, new int[]{148,1});
    states[130] = new State(-149,new int[]{}, new int[]{149,1});
    states[131] = new State(-150,new int[]{}, new int[]{150,1});
    states[132] = new State(-151,new int[]{}, new int[]{151,1});
    states[133] = new State(-152,new int[]{}, new int[]{152,1});
    states[134] = new State(-153,new int[]{}, new int[]{153,1});
    states[135] = new State(-154,new int[]{}, new int[]{154,1});
    states[136] = new State(-155,new int[]{}, new int[]{155,1});
    states[137] = new State(-156,new int[]{}, new int[]{156,1});
    states[138] = new State(-157,new int[]{}, new int[]{157,1});
    states[139] = new State(-158,new int[]{}, new int[]{158,1});
    states[140] = new State(-159,new int[]{}, new int[]{159,1});
    states[141] = new State(-160,new int[]{}, new int[]{160,1});
    states[142] = new State(-161,new int[]{}, new int[]{161,1});
    states[143] = new State(-162,new int[]{}, new int[]{162,1});
    states[144] = new State(-163,new int[]{}, new int[]{163,1});
    states[145] = new State(-164,new int[]{}, new int[]{164,1});
    states[146] = new State(-165,new int[]{}, new int[]{165,1});
    states[147] = new State(-166,new int[]{}, new int[]{166,1});
    states[148] = new State(-167,new int[]{}, new int[]{167,1});
    states[149] = new State(new int[]{6,31,7,153,23,154},new int[]{-13,150,-29,152,-42,58}, new int[]{118,1});
    states[150] = new State(new int[]{24,151},new int[]{}, new int[]{118,2});
    states[151] = new State(-118,new int[]{}, new int[]{118,3});
    states[152] = new State(-65,new int[]{}, new int[]{65,2});
    states[153] = new State(-197,new int[]{}, new int[]{197,1});
    states[154] = new State(-198,new int[]{}, new int[]{198,1});
    states[155] = new State(-99,new int[]{}, new int[]{99,1});
    states[156] = new State(-192,new int[]{-40,157}, new int[]{75,1});
    states[157] = new State(new int[]{21,158,4,161,5,162,6,163,7,164,8,165,9,166,10,167,11,168,12,169,13,170,14,171,15,172,16,173,17,174,18,175,19,176,22,177,23,178,24,179,20,156},new int[]{-2,159,-14,160}, new int[]{75,2});
    states[158] = new State(-75,new int[]{}, new int[]{75,3});
    states[159] = new State(-193,new int[]{}, new int[]{193,2});
    states[160] = new State(-194,new int[]{}, new int[]{194,2});
    states[161] = new State(-2,new int[]{}, new int[]{2,1});
    states[162] = new State(-3,new int[]{}, new int[]{3,1});
    states[163] = new State(-4,new int[]{}, new int[]{4,1});
    states[164] = new State(-5,new int[]{}, new int[]{5,1});
    states[165] = new State(-6,new int[]{}, new int[]{6,1});
    states[166] = new State(-7,new int[]{}, new int[]{7,1});
    states[167] = new State(-8,new int[]{}, new int[]{8,1});
    states[168] = new State(-9,new int[]{}, new int[]{9,1});
    states[169] = new State(-10,new int[]{}, new int[]{10,1});
    states[170] = new State(-11,new int[]{}, new int[]{11,1});
    states[171] = new State(-12,new int[]{}, new int[]{12,1});
    states[172] = new State(-13,new int[]{}, new int[]{13,1});
    states[173] = new State(-14,new int[]{}, new int[]{14,1});
    states[174] = new State(-15,new int[]{}, new int[]{15,1});
    states[175] = new State(-16,new int[]{}, new int[]{16,1});
    states[176] = new State(-17,new int[]{}, new int[]{17,1});
    states[177] = new State(-18,new int[]{}, new int[]{18,1});
    states[178] = new State(-19,new int[]{}, new int[]{19,1});
    states[179] = new State(-20,new int[]{}, new int[]{20,1});
    states[180] = new State(-100,new int[]{}, new int[]{100,1});
    states[181] = new State(-208,new int[]{}, new int[]{208,1});
    states[182] = new State(-21,new int[]{}, new int[]{21,1});
    states[183] = new State(-22,new int[]{}, new int[]{22,1});
    states[184] = new State(-23,new int[]{}, new int[]{23,1});
    states[185] = new State(-121,new int[]{}, new int[]{121,1});
    states[186] = new State(-62,new int[]{}, new int[]{62,1});
    states[187] = new State(-90,new int[]{}, new int[]{90,1});
    states[188] = new State(-91,new int[]{}, new int[]{91,1});
    states[189] = new State(new int[]{10,125,6,-66,7,-66,23,-66,14,-66,9,-66},new int[]{-25,190,-31,191,-8,192}, new int[]{109,1});
    states[190] = new State(-109,new int[]{}, new int[]{109,2});
    states[191] = new State(-111,new int[]{}, new int[]{111,1});
    states[192] = new State(new int[]{6,31,7,153,23,154,14,120,9,-201},new int[]{-13,193,-26,195,-29,196,-42,58,-23,197,-24,189,-44,198}, new int[]{112,1});
    states[193] = new State(new int[]{24,194},new int[]{}, new int[]{112,2});
    states[194] = new State(-112,new int[]{}, new int[]{112,3});
    states[195] = new State(-67,new int[]{}, new int[]{67,2});
    states[196] = new State(-113,new int[]{}, new int[]{113,1});
    states[197] = new State(-114,new int[]{}, new int[]{114,1});
    states[198] = new State(new int[]{9,74},new int[]{}, new int[]{110,1});
    states[199] = new State(-92,new int[]{}, new int[]{92,1});
    states[200] = new State(-213,new int[]{-50,201}, new int[]{124,1});
    states[201] = new State(new int[]{4,204,5,205,7,206,8,207,9,208,10,209,11,210,13,211,14,212,15,213,16,214,17,215,18,216,20,217,21,218,22,219,23,220,24,221,6,31,19,-124,12,-124,2,-124},new int[]{-34,202,-37,203,-13,222}, new int[]{124,2});
    states[202] = new State(-214,new int[]{}, new int[]{214,2});
    states[203] = new State(-125,new int[]{}, new int[]{125,1});
    states[204] = new State(-168,new int[]{}, new int[]{168,1});
    states[205] = new State(-169,new int[]{}, new int[]{169,1});
    states[206] = new State(-170,new int[]{}, new int[]{170,1});
    states[207] = new State(-171,new int[]{}, new int[]{171,1});
    states[208] = new State(-172,new int[]{}, new int[]{172,1});
    states[209] = new State(-173,new int[]{}, new int[]{173,1});
    states[210] = new State(-174,new int[]{}, new int[]{174,1});
    states[211] = new State(-175,new int[]{}, new int[]{175,1});
    states[212] = new State(-176,new int[]{}, new int[]{176,1});
    states[213] = new State(-177,new int[]{}, new int[]{177,1});
    states[214] = new State(-178,new int[]{}, new int[]{178,1});
    states[215] = new State(-179,new int[]{}, new int[]{179,1});
    states[216] = new State(-180,new int[]{}, new int[]{180,1});
    states[217] = new State(-181,new int[]{}, new int[]{181,1});
    states[218] = new State(-182,new int[]{}, new int[]{182,1});
    states[219] = new State(-183,new int[]{}, new int[]{183,1});
    states[220] = new State(-184,new int[]{}, new int[]{184,1});
    states[221] = new State(-185,new int[]{}, new int[]{185,1});
    states[222] = new State(-126,new int[]{}, new int[]{126,1});
    states[223] = new State(-93,new int[]{}, new int[]{93,1});
    states[224] = new State(-203,new int[]{-45,225}, new int[]{101,1});
    states[225] = new State(new int[]{13,226,7,153,23,154,4,116,5,117,17,85,22,119,14,120,20,156,2,232,9,-201},new int[]{-20,227,-29,228,-42,58,-21,229,-15,114,-12,118,-24,230,-44,198,-14,231}, new int[]{101,2});
    states[226] = new State(-101,new int[]{}, new int[]{101,3});
    states[227] = new State(-204,new int[]{}, new int[]{204,2});
    states[228] = new State(-102,new int[]{}, new int[]{102,1});
    states[229] = new State(-103,new int[]{}, new int[]{103,1});
    states[230] = new State(-104,new int[]{}, new int[]{104,1});
    states[231] = new State(-105,new int[]{}, new int[]{105,1});
    states[232] = new State(-106,new int[]{}, new int[]{106,1});
    states[233] = new State(-70,new int[]{}, new int[]{70,1});
    states[234] = new State(-94,new int[]{}, new int[]{94,1});
    states[235] = new State(-95,new int[]{}, new int[]{95,1});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-51, new int[]{-1,3});
    rules[2] = new Rule(-2, new int[]{4});
    rules[3] = new Rule(-2, new int[]{5});
    rules[4] = new Rule(-2, new int[]{6});
    rules[5] = new Rule(-2, new int[]{7});
    rules[6] = new Rule(-2, new int[]{8});
    rules[7] = new Rule(-2, new int[]{9});
    rules[8] = new Rule(-2, new int[]{10});
    rules[9] = new Rule(-2, new int[]{11});
    rules[10] = new Rule(-2, new int[]{12});
    rules[11] = new Rule(-2, new int[]{13});
    rules[12] = new Rule(-2, new int[]{14});
    rules[13] = new Rule(-2, new int[]{15});
    rules[14] = new Rule(-2, new int[]{16});
    rules[15] = new Rule(-2, new int[]{17});
    rules[16] = new Rule(-2, new int[]{18});
    rules[17] = new Rule(-2, new int[]{19});
    rules[18] = new Rule(-2, new int[]{22});
    rules[19] = new Rule(-2, new int[]{23});
    rules[20] = new Rule(-2, new int[]{24});
    rules[21] = new Rule(-3, new int[]{14});
    rules[22] = new Rule(-3, new int[]{15});
    rules[23] = new Rule(-3, new int[]{16});
    rules[24] = new Rule(-4, new int[]{4});
    rules[25] = new Rule(-4, new int[]{5});
    rules[26] = new Rule(-4, new int[]{7});
    rules[27] = new Rule(-4, new int[]{8});
    rules[28] = new Rule(-4, new int[]{9});
    rules[29] = new Rule(-4, new int[]{10});
    rules[30] = new Rule(-4, new int[]{11});
    rules[31] = new Rule(-4, new int[]{12});
    rules[32] = new Rule(-4, new int[]{13});
    rules[33] = new Rule(-4, new int[]{14});
    rules[34] = new Rule(-4, new int[]{15});
    rules[35] = new Rule(-4, new int[]{16});
    rules[36] = new Rule(-4, new int[]{17});
    rules[37] = new Rule(-4, new int[]{18});
    rules[38] = new Rule(-4, new int[]{20});
    rules[39] = new Rule(-4, new int[]{21});
    rules[40] = new Rule(-4, new int[]{22});
    rules[41] = new Rule(-4, new int[]{23});
    rules[42] = new Rule(-4, new int[]{24});
    rules[43] = new Rule(-5, new int[]{4});
    rules[44] = new Rule(-5, new int[]{5});
    rules[45] = new Rule(-5, new int[]{6});
    rules[46] = new Rule(-5, new int[]{7});
    rules[47] = new Rule(-5, new int[]{8});
    rules[48] = new Rule(-5, new int[]{9});
    rules[49] = new Rule(-5, new int[]{10});
    rules[50] = new Rule(-5, new int[]{11});
    rules[51] = new Rule(-5, new int[]{12});
    rules[52] = new Rule(-5, new int[]{13});
    rules[53] = new Rule(-5, new int[]{14});
    rules[54] = new Rule(-5, new int[]{15});
    rules[55] = new Rule(-5, new int[]{16});
    rules[56] = new Rule(-5, new int[]{19});
    rules[57] = new Rule(-5, new int[]{20});
    rules[58] = new Rule(-5, new int[]{21});
    rules[59] = new Rule(-5, new int[]{22});
    rules[60] = new Rule(-5, new int[]{23});
    rules[61] = new Rule(-5, new int[]{24});
    rules[62] = new Rule(-6, new int[]{-30});
    rules[63] = new Rule(-6, new int[]{-6,-30});
    rules[64] = new Rule(-7, new int[]{});
    rules[65] = new Rule(-7, new int[]{-7,-29});
    rules[66] = new Rule(-8, new int[]{});
    rules[67] = new Rule(-8, new int[]{-8,-26});
    rules[68] = new Rule(-9, new int[]{});
    rules[69] = new Rule(-9, new int[]{-9,-18});
    rules[70] = new Rule(-10, new int[]{15});
    rules[71] = new Rule(-11, new int[]{});
    rules[72] = new Rule(-11, new int[]{-11,-17});
    rules[73] = new Rule(-12, new int[]{17,-38,18});
    rules[74] = new Rule(-13, new int[]{6,-39,19});
    rules[75] = new Rule(-14, new int[]{20,-40,21});
    rules[76] = new Rule(-15, new int[]{4});
    rules[77] = new Rule(-15, new int[]{5});
    rules[78] = new Rule(-15, new int[]{-12});
    rules[79] = new Rule(-15, new int[]{22});
    rules[80] = new Rule(-16, new int[]{4});
    rules[81] = new Rule(-16, new int[]{5});
    rules[82] = new Rule(-16, new int[]{-12});
    rules[83] = new Rule(-16, new int[]{22});
    rules[84] = new Rule(-16, new int[]{9});
    rules[85] = new Rule(-16, new int[]{23});
    rules[86] = new Rule(-16, new int[]{20});
    rules[87] = new Rule(-16, new int[]{21});
    rules[88] = new Rule(-1, new int[]{-11,-41,-43});
    rules[89] = new Rule(-17, new int[]{-29});
    rules[90] = new Rule(-17, new int[]{-21});
    rules[91] = new Rule(-17, new int[]{-23});
    rules[92] = new Rule(-17, new int[]{-33});
    rules[93] = new Rule(-17, new int[]{-19});
    rules[94] = new Rule(-17, new int[]{-14});
    rules[95] = new Rule(-17, new int[]{2});
    rules[96] = new Rule(-18, new int[]{8});
    rules[97] = new Rule(-18, new int[]{-44,-21});
    rules[98] = new Rule(-18, new int[]{-27});
    rules[99] = new Rule(-18, new int[]{-14});
    rules[100] = new Rule(-18, new int[]{2});
    rules[101] = new Rule(-19, new int[]{-10,-45,13});
    rules[102] = new Rule(-20, new int[]{-29});
    rules[103] = new Rule(-20, new int[]{-21});
    rules[104] = new Rule(-20, new int[]{-24});
    rules[105] = new Rule(-20, new int[]{-14});
    rules[106] = new Rule(-20, new int[]{2});
    rules[107] = new Rule(-21, new int[]{-15,-46,24});
    rules[108] = new Rule(-22, new int[]{-15,-46,-3,-47,-9,19,24});
    rules[109] = new Rule(-23, new int[]{-24,-25});
    rules[110] = new Rule(-24, new int[]{-44,9,-46,24,-48});
    rules[111] = new Rule(-25, new int[]{-31});
    rules[112] = new Rule(-25, new int[]{-8,-13,24});
    rules[113] = new Rule(-26, new int[]{-29});
    rules[114] = new Rule(-26, new int[]{-23});
    rules[115] = new Rule(-27, new int[]{-24,-28});
    rules[116] = new Rule(-28, new int[]{});
    rules[117] = new Rule(-28, new int[]{-31});
    rules[118] = new Rule(-28, new int[]{-7,-13,24});
    rules[119] = new Rule(-29, new int[]{-42,-6});
    rules[120] = new Rule(-30, new int[]{-21});
    rules[121] = new Rule(-30, new int[]{-22});
    rules[122] = new Rule(-31, new int[]{10,-49,24});
    rules[123] = new Rule(-32, new int[]{11,24});
    rules[124] = new Rule(-33, new int[]{12,-50});
    rules[125] = new Rule(-34, new int[]{-37});
    rules[126] = new Rule(-34, new int[]{-13});
    rules[127] = new Rule(-35, new int[]{4});
    rules[128] = new Rule(-35, new int[]{5});
    rules[129] = new Rule(-35, new int[]{6});
    rules[130] = new Rule(-35, new int[]{7});
    rules[131] = new Rule(-35, new int[]{8});
    rules[132] = new Rule(-35, new int[]{9});
    rules[133] = new Rule(-35, new int[]{10});
    rules[134] = new Rule(-35, new int[]{11});
    rules[135] = new Rule(-35, new int[]{12});
    rules[136] = new Rule(-35, new int[]{13});
    rules[137] = new Rule(-35, new int[]{14});
    rules[138] = new Rule(-35, new int[]{15});
    rules[139] = new Rule(-35, new int[]{16});
    rules[140] = new Rule(-35, new int[]{17});
    rules[141] = new Rule(-35, new int[]{18});
    rules[142] = new Rule(-35, new int[]{19});
    rules[143] = new Rule(-35, new int[]{20});
    rules[144] = new Rule(-35, new int[]{21});
    rules[145] = new Rule(-35, new int[]{22});
    rules[146] = new Rule(-35, new int[]{23});
    rules[147] = new Rule(-35, new int[]{24});
    rules[148] = new Rule(-36, new int[]{4});
    rules[149] = new Rule(-36, new int[]{5});
    rules[150] = new Rule(-36, new int[]{6});
    rules[151] = new Rule(-36, new int[]{7});
    rules[152] = new Rule(-36, new int[]{8});
    rules[153] = new Rule(-36, new int[]{9});
    rules[154] = new Rule(-36, new int[]{10});
    rules[155] = new Rule(-36, new int[]{11});
    rules[156] = new Rule(-36, new int[]{12});
    rules[157] = new Rule(-36, new int[]{13});
    rules[158] = new Rule(-36, new int[]{14});
    rules[159] = new Rule(-36, new int[]{15});
    rules[160] = new Rule(-36, new int[]{16});
    rules[161] = new Rule(-36, new int[]{17});
    rules[162] = new Rule(-36, new int[]{18});
    rules[163] = new Rule(-36, new int[]{19});
    rules[164] = new Rule(-36, new int[]{20});
    rules[165] = new Rule(-36, new int[]{21});
    rules[166] = new Rule(-36, new int[]{22});
    rules[167] = new Rule(-36, new int[]{23});
    rules[168] = new Rule(-37, new int[]{4});
    rules[169] = new Rule(-37, new int[]{5});
    rules[170] = new Rule(-37, new int[]{7});
    rules[171] = new Rule(-37, new int[]{8});
    rules[172] = new Rule(-37, new int[]{9});
    rules[173] = new Rule(-37, new int[]{10});
    rules[174] = new Rule(-37, new int[]{11});
    rules[175] = new Rule(-37, new int[]{13});
    rules[176] = new Rule(-37, new int[]{14});
    rules[177] = new Rule(-37, new int[]{15});
    rules[178] = new Rule(-37, new int[]{16});
    rules[179] = new Rule(-37, new int[]{17});
    rules[180] = new Rule(-37, new int[]{18});
    rules[181] = new Rule(-37, new int[]{20});
    rules[182] = new Rule(-37, new int[]{21});
    rules[183] = new Rule(-37, new int[]{22});
    rules[184] = new Rule(-37, new int[]{23});
    rules[185] = new Rule(-37, new int[]{24});
    rules[186] = new Rule(-38, new int[]{});
    rules[187] = new Rule(-38, new int[]{-38,-5});
    rules[188] = new Rule(-38, new int[]{-38,-12});
    rules[189] = new Rule(-39, new int[]{});
    rules[190] = new Rule(-39, new int[]{-39,-4});
    rules[191] = new Rule(-39, new int[]{-39,-13});
    rules[192] = new Rule(-40, new int[]{});
    rules[193] = new Rule(-40, new int[]{-40,-2});
    rules[194] = new Rule(-40, new int[]{-40,-14});
    rules[195] = new Rule(-41, new int[]{-13,22});
    rules[196] = new Rule(-41, new int[]{19,22});
    rules[197] = new Rule(-42, new int[]{7});
    rules[198] = new Rule(-42, new int[]{23});
    rules[199] = new Rule(-43, new int[]{});
    rules[200] = new Rule(-43, new int[]{-43,-35});
    rules[201] = new Rule(-44, new int[]{});
    rules[202] = new Rule(-44, new int[]{14});
    rules[203] = new Rule(-45, new int[]{});
    rules[204] = new Rule(-45, new int[]{-45,-20});
    rules[205] = new Rule(-46, new int[]{});
    rules[206] = new Rule(-46, new int[]{-46,-16});
    rules[207] = new Rule(-47, new int[]{});
    rules[208] = new Rule(-47, new int[]{-12});
    rules[209] = new Rule(-48, new int[]{});
    rules[210] = new Rule(-48, new int[]{-48,-32});
    rules[211] = new Rule(-49, new int[]{});
    rules[212] = new Rule(-49, new int[]{-49,-36});
    rules[213] = new Rule(-50, new int[]{});
    rules[214] = new Rule(-50, new int[]{-50,-34});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    CurrentSemanticValue = new ValueType();
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // _ANY7 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 3: // _ANY7 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 4: // _ANY7 -> tkCodeOpen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 5: // _ANY7 -> tkDefs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 6: // _ANY7 -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 7: // _ANY7 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 8: // _ANY7 -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 9: // _ANY7 -> tkDirectiveHeader
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 10: // _ANY7 -> tkInitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 11: // _ANY7 -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 12: // _ANY7 -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 13: // _ANY7 -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 14: // _ANY7 -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 15: // _ANY7 -> _Ropen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 16: // _ANY7 -> _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 17: // _ANY7 -> _end
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 18: // _ANY7 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 19: // _ANY7 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 20: // _ANY7 -> _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 21: // tkClassOpen -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 22: // tkClassOpen -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 23: // tkClassOpen -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 24: // _ANY6 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 25: // _ANY6 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 26: // _ANY6 -> tkDefs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 27: // _ANY6 -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 28: // _ANY6 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 29: // _ANY6 -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 30: // _ANY6 -> tkDirectiveHeader
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 31: // _ANY6 -> tkInitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 32: // _ANY6 -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 33: // _ANY6 -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 34: // _ANY6 -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 35: // _ANY6 -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 36: // _ANY6 -> _Ropen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 37: // _ANY6 -> _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 38: // _ANY6 -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 39: // _ANY6 -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 40: // _ANY6 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 41: // _ANY6 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 42: // _ANY6 -> _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 43: // _ANY -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 44: // _ANY -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 45: // _ANY -> tkCodeOpen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 46: // _ANY -> tkDefs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 47: // _ANY -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 48: // _ANY -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 49: // _ANY -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 50: // _ANY -> tkDirectiveHeader
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 51: // _ANY -> tkInitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 52: // _ANY -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 53: // _ANY -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 54: // _ANY -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 55: // _ANY -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 56: // _ANY -> _end
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 57: // _ANY -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 58: // _ANY -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 59: // _ANY -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 60: // _ANY -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 61: // _ANY -> _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 62: // _Defs_set -> FieldOrClass
{
        CurrentLocationSpan = Scanner.yylloc;
		CurrentSemanticValue.type_SourceEntityUniformSet = new SourceEntityUniformSet("", false, CurrentLocationSpan);
		CurrentSemanticValue.type_SourceEntityUniformSet.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_SourceEntityUniformSet.Value.Add("1");

	}
        break;
      case 63: // _Defs_set -> _Defs_set, FieldOrClass
{
        CurrentLocationSpan = LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.type_SourceEntityUniformSet = ValueStack[ValueStack.Depth-2].type_SourceEntityUniformSet;
        CurrentSemanticValue.type_SourceEntityUniformSet.Location = CurrentLocationSpan;
		CurrentSemanticValue.type_SourceEntityUniformSet.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
        CurrentSemanticValue.type_SourceEntityUniformSet.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
    }
        break;
      case 64: // _ClassMethodBody_set -> /* empty */
{
        CurrentLocationSpan = Scanner.yylloc;
		CurrentSemanticValue.type_SourceEntityUniformSet = new SourceEntityUniformSet("", true, CurrentLocationSpan);

	}
        break;
      case 65: // _ClassMethodBody_set -> _ClassMethodBody_set, Defs
{
        CurrentLocationSpan = LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.type_SourceEntityUniformSet = ValueStack[ValueStack.Depth-2].type_SourceEntityUniformSet;
        CurrentSemanticValue.type_SourceEntityUniformSet.Location = CurrentLocationSpan;
		CurrentSemanticValue.type_SourceEntityUniformSet.AddItem(ValueStack[ValueStack.Depth-1].type_Defs);
        CurrentSemanticValue.type_SourceEntityUniformSet.AddValue(ValueStack[ValueStack.Depth-1].type_Defs);
    }
        break;
      case 66: // _MethodBody_set -> /* empty */
{
        CurrentLocationSpan = Scanner.yylloc;
		CurrentSemanticValue.type_SourceEntityUniformSet = new SourceEntityUniformSet("", true, CurrentLocationSpan);

	}
        break;
      case 67: // _MethodBody_set -> _MethodBody_set, MethodLocals
{
        CurrentLocationSpan = LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.type_SourceEntityUniformSet = ValueStack[ValueStack.Depth-2].type_SourceEntityUniformSet;
        CurrentSemanticValue.type_SourceEntityUniformSet.Location = CurrentLocationSpan;
		CurrentSemanticValue.type_SourceEntityUniformSet.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
        CurrentSemanticValue.type_SourceEntityUniformSet.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
    }
        break;
      case 68: // _Class_set -> /* empty */
{
        CurrentLocationSpan = Scanner.yylloc;
		CurrentSemanticValue.type_SourceEntityUniformSet = new SourceEntityUniformSet("", true, CurrentLocationSpan);

	}
        break;
      case 69: // _Class_set -> _Class_set, ClassNode
{
        CurrentLocationSpan = LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.type_SourceEntityUniformSet = ValueStack[ValueStack.Depth-2].type_SourceEntityUniformSet;
        CurrentSemanticValue.type_SourceEntityUniformSet.Location = CurrentLocationSpan;
		CurrentSemanticValue.type_SourceEntityUniformSet.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
        CurrentSemanticValue.type_SourceEntityUniformSet.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
    }
        break;
      case 70: // tkInterf -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 71: // _Program_set -> /* empty */
{
        CurrentLocationSpan = Scanner.yylloc;
		CurrentSemanticValue.type_SourceEntityUniformSet = new SourceEntityUniformSet("", true, CurrentLocationSpan);

	}
        break;
      case 72: // _Program_set -> _Program_set, ProgramNode
{
        CurrentLocationSpan = LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.type_SourceEntityUniformSet = ValueStack[ValueStack.Depth-2].type_SourceEntityUniformSet;
        CurrentSemanticValue.type_SourceEntityUniformSet.Location = CurrentLocationSpan;
		CurrentSemanticValue.type_SourceEntityUniformSet.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
        CurrentSemanticValue.type_SourceEntityUniformSet.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
    }
        break;
      case 73: // Params -> _Ropen, _, _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-3].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 74: // Block -> tkCodeOpen, _11, _end
{
		CurrentSemanticValue.type_Block = new Block(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Block.Location;
		CurrentSemanticValue.type_Block.Value.Add("Block");

	}
        break;
      case 75: // Attribute -> _Sopen, _12, _Sclose
{
		CurrentSemanticValue.type_Attribute = new Attribute(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Attribute.Location;
		CurrentSemanticValue.type_Attribute.AddValue(ValueStack[ValueStack.Depth-3].type_Token);
		CurrentSemanticValue.type_Attribute.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_Attribute.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 76: // Tk -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 77: // Tk -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 78: // Tk -> Params
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 79: // Tk -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 80: // Tk2 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 81: // Tk2 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 82: // Tk2 -> Params
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 83: // Tk2 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 84: // Tk2 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 85: // Tk2 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 86: // Tk2 -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 87: // Tk2 -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 88: // Program -> _Program_set, _13, __ANY8_list
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-3].type_SourceEntityUniformSet);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		root = CurrentSemanticValue.type_PAS_TreeNode;
	}
        break;
      case 89: // ProgramNode -> Defs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Defs);
errBegin = CurrentLocationSpan;
	}
        break;
      case 90: // ProgramNode -> Field
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Field);
errBegin = CurrentLocationSpan;
	}
        break;
      case 91: // ProgramNode -> Method
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Method);
errBegin = CurrentLocationSpan;
	}
        break;
      case 92: // ProgramNode -> InitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_InitFinal);
errBegin = CurrentLocationSpan;
	}
        break;
      case 93: // ProgramNode -> InterfacePart
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
errBegin = CurrentLocationSpan;
	}
        break;
      case 94: // ProgramNode -> Attribute
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Attribute);
errBegin = CurrentLocationSpan;
	}
        break;
      case 95: // ProgramNode -> error
{
        CurrentLocationSpan = new LexLocation(errBegin.EndLine, errBegin.EndColumn, LocationStack[LocationStack.Depth-1].StartLine, LocationStack[LocationStack.Depth-1].StartColumn);
        PAS_TreeNode err = new PAS_TreeNode((Scanner as Scanner).errorMsg, CurrentLocationSpan);
        Errors.Add(err);
        errBegin = CurrentLocationSpan;
    }
        break;
      case 96: // ClassNode -> tkClassVisModifier
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    errBegin = CurrentLocationSpan;
}
        break;
      case 97: // ClassNode -> __class_opt, Field
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Field);
errBegin = CurrentLocationSpan;
	}
        break;
      case 98: // ClassNode -> ClassMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_ClassMethod);
errBegin = CurrentLocationSpan;
	}
        break;
      case 99: // ClassNode -> Attribute
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Attribute);
errBegin = CurrentLocationSpan;
	}
        break;
      case 100: // ClassNode -> error
{
        CurrentLocationSpan = new LexLocation(errBegin.EndLine, errBegin.EndColumn, LocationStack[LocationStack.Depth-1].StartLine, LocationStack[LocationStack.Depth-1].StartColumn);
        PAS_TreeNode err = new PAS_TreeNode((Scanner as Scanner).errorMsg, CurrentLocationSpan);
        Errors.Add(err);
        errBegin = CurrentLocationSpan;
    }
        break;
      case 101: // InterfacePart -> tkInterf, _InterfNode_list, tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);

	}
        break;
      case 102: // InterfNode -> Defs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Defs);
errBegin = CurrentLocationSpan;
	}
        break;
      case 103: // InterfNode -> Field
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Field);
errBegin = CurrentLocationSpan;
	}
        break;
      case 104: // InterfNode -> MethodHeader
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_MethodHeader);
errBegin = CurrentLocationSpan;
	}
        break;
      case 105: // InterfNode -> Attribute
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Attribute);
errBegin = CurrentLocationSpan;
	}
        break;
      case 106: // InterfNode -> error
{
        CurrentLocationSpan = new LexLocation(errBegin.EndLine, errBegin.EndColumn, LocationStack[LocationStack.Depth-1].StartLine, LocationStack[LocationStack.Depth-1].StartColumn);
        PAS_TreeNode err = new PAS_TreeNode((Scanner as Scanner).errorMsg, CurrentLocationSpan);
        Errors.Add(err);
        errBegin = CurrentLocationSpan;
    }
        break;
      case 107: // Field -> Tk, _Tk2_list, _Scolon
{
		CurrentSemanticValue.type_Field = new Field(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Field.Location;
		CurrentSemanticValue.type_Field.AddValue(ValueStack[ValueStack.Depth-3].type_PAS_TreeNode);
		CurrentSemanticValue.type_Field.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);

	}
        break;
      case 108: // Class -> Tk, _Tk2_list, tkClassOpen, _Params_opt, _Class_set, _end, _Scolon
{
		CurrentSemanticValue.type_Class = new Class(new List<string>(), LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Class.Location;
		CurrentSemanticValue.type_Class.AddValue(ValueStack[ValueStack.Depth-7].type_PAS_TreeNode);
		CurrentSemanticValue.type_Class.AddValue(ValueStack[ValueStack.Depth-6].type_PAS_TreeNode);
		CurrentSemanticValue.type_Class.AddValue(ValueStack[ValueStack.Depth-5].type_PAS_TreeNode);
		CurrentSemanticValue.type_Class.AddValue(ValueStack[ValueStack.Depth-4].type_PAS_TreeNode);
		CurrentSemanticValue.type_Class.AddSubItems(ValueStack[ValueStack.Depth-3].type_SourceEntityUniformSet);

	}
        break;
      case 109: // Method -> MethodHeader, MethodBody
{
		CurrentSemanticValue.type_Method = new Method(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Method.Location;
		CurrentSemanticValue.type_Method.AddValue(ValueStack[ValueStack.Depth-2].type_MethodHeader);
		CurrentSemanticValue.type_Method.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 110: // MethodHeader -> __class_opt, tkMethod, _Tk2_list, _Scolon, 
                //                 _DirectiveHeader_list
{
		CurrentSemanticValue.type_MethodHeader = new MethodHeader(new List<string>(), LocationStack[LocationStack.Depth-5].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_MethodHeader.Location;
		CurrentSemanticValue.type_MethodHeader.AddValue(ValueStack[ValueStack.Depth-5].type_PAS_TreeNode);
		CurrentSemanticValue.type_MethodHeader.AddValue(ValueStack[ValueStack.Depth-4].type_Token);
		CurrentSemanticValue.type_MethodHeader.AddValue(ValueStack[ValueStack.Depth-3].type_PAS_TreeNode);
		CurrentSemanticValue.type_MethodHeader.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 111: // MethodBody -> Directive
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 112: // MethodBody -> _MethodBody_set, Block, _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-3].type_SourceEntityUniformSet);

	}
        break;
      case 113: // MethodLocals -> Defs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Defs);

	}
        break;
      case 114: // MethodLocals -> Method
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Method);

	}
        break;
      case 115: // ClassMethod -> MethodHeader, ClassMethodBody
{
		CurrentSemanticValue.type_ClassMethod = new ClassMethod(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_ClassMethod.Location;
		CurrentSemanticValue.type_ClassMethod.AddValue(ValueStack[ValueStack.Depth-2].type_MethodHeader);
		CurrentSemanticValue.type_ClassMethod.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 116: // ClassMethodBody -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 117: // ClassMethodBody -> Directive
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 118: // ClassMethodBody -> _ClassMethodBody_set, Block, _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-3].type_SourceEntityUniformSet);

	}
        break;
      case 119: // Defs -> _14, _Defs_set
{
		CurrentSemanticValue.type_Defs = new Defs(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Defs.Location;
		CurrentSemanticValue.type_Defs.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_Defs.AddSubItems(ValueStack[ValueStack.Depth-1].type_SourceEntityUniformSet);

	}
        break;
      case 120: // FieldOrClass -> Field
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Field);

	}
        break;
      case 121: // FieldOrClass -> Class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Class);

	}
        break;
      case 122: // Directive -> tkDirective, __ANY9_list, _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-3].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);

	}
        break;
      case 123: // DirectiveHeader -> tkDirectiveHeader, _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_Token);

	}
        break;
      case 124: // InitFinal -> tkInitFinal, _CodeToken_list
{
		CurrentSemanticValue.type_InitFinal = new InitFinal(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_InitFinal.Location;
		CurrentSemanticValue.type_InitFinal.AddValue(ValueStack[ValueStack.Depth-2].type_Token);

	}
        break;
      case 125: // CodeToken -> _ANY10
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 126: // CodeToken -> Block
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 127: // _ANY8 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 128: // _ANY8 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 129: // _ANY8 -> tkCodeOpen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 130: // _ANY8 -> tkDefs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 131: // _ANY8 -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 132: // _ANY8 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 133: // _ANY8 -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 134: // _ANY8 -> tkDirectiveHeader
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 135: // _ANY8 -> tkInitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 136: // _ANY8 -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 137: // _ANY8 -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 138: // _ANY8 -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 139: // _ANY8 -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 140: // _ANY8 -> _Ropen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 141: // _ANY8 -> _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 142: // _ANY8 -> _end
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 143: // _ANY8 -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 144: // _ANY8 -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 145: // _ANY8 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 146: // _ANY8 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 147: // _ANY8 -> _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 148: // _ANY9 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 149: // _ANY9 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 150: // _ANY9 -> tkCodeOpen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 151: // _ANY9 -> tkDefs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 152: // _ANY9 -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 153: // _ANY9 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 154: // _ANY9 -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 155: // _ANY9 -> tkDirectiveHeader
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 156: // _ANY9 -> tkInitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 157: // _ANY9 -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 158: // _ANY9 -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 159: // _ANY9 -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 160: // _ANY9 -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 161: // _ANY9 -> _Ropen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 162: // _ANY9 -> _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 163: // _ANY9 -> _end
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 164: // _ANY9 -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 165: // _ANY9 -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 166: // _ANY9 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 167: // _ANY9 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 168: // _ANY10 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 169: // _ANY10 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 170: // _ANY10 -> tkDefs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 171: // _ANY10 -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 172: // _ANY10 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 173: // _ANY10 -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 174: // _ANY10 -> tkDirectiveHeader
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 175: // _ANY10 -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 176: // _ANY10 -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 177: // _ANY10 -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 178: // _ANY10 -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 179: // _ANY10 -> _Ropen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 180: // _ANY10 -> _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 181: // _ANY10 -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 182: // _ANY10 -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 183: // _ANY10 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 184: // _ANY10 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 185: // _ANY10 -> _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 186: // _ -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 187: // _ -> _, _ANY
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 188: // _ -> _, Params
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 189: // _11 -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 190: // _11 -> _11, _ANY6
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 191: // _11 -> _11, Block
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 192: // _12 -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 193: // _12 -> _12, _ANY7
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 194: // _12 -> _12, Attribute
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Attribute);

	}
        break;
      case 195: // _13 -> Block, _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-2].type_Block);

	}
        break;
      case 196: // _13 -> _end, _Dot
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 197: // _14 -> tkDefs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 198: // _14 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 199: // __ANY8_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 200: // __ANY8_list -> __ANY8_list, _ANY8
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 201: // __class_opt -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 202: // __class_opt -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 203: // _InterfNode_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 204: // _InterfNode_list -> _InterfNode_list, InterfNode
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 205: // _Tk2_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 206: // _Tk2_list -> _Tk2_list, Tk2
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 207: // _Params_opt -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 208: // _Params_opt -> Params
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 209: // _DirectiveHeader_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 210: // _DirectiveHeader_list -> _DirectiveHeader_list, DirectiveHeader
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 211: // __ANY9_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 212: // __ANY9_list -> __ANY9_list, _ANY9
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 213: // _CodeToken_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 214: // _CodeToken_list -> _CodeToken_list, CodeToken
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

public LexLocation errBegin = new LexLocation(1,0,1,0);
public List<SourceEntity> Errors = new List<SourceEntity>();
}
}
