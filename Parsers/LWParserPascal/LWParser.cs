// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  BLUEGENE
// DateTime: 07.07.2016 16:03:57
// UserName: MikhailoMMX
// Input file <LWParser.y - 07.07.2016 16:03:57>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AspectCore;

namespace LWParser
{
public enum Tokens {error=2,EOF=3,LetterDigits=4,Sign=5,tkCodeOpen=6,
    tkClassVisModifier=7,tkMethod=8,tkDirective=9,tkInitFinal=10,tkImpl=11,_class=12,
    _interface=13,_record=14,_var=15,_const=16,_label=17,_virtual=18,
    _override=19,_reintroduce=20,_extensionmethod=21,_where=22,_Ropen=23,_Rclose=24,
    _Scolon=25,_end=26,_Sopen=27,_Sclose=28,_Dot=29,_type=30};

public partial class ValueType
{ 
  public SourceEntity type_SourceEntity;
  public PAS_TreeNode type_PAS_TreeNode;
  public Token type_Token;
  public Block type_Block;
  public Attribute type_Attribute;
  public Field type_Field;
  public Class type_Class;
  public Method type_Method;
  public MethodHeader type_MethodHeader;
  public ClassMethod type_ClassMethod;
  public Defs type_Defs;
  public InitFinal type_InitFinal;
  public SourceEntityUniformSet type_SourceEntityUniformSet;

}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[291];
  private static State[] states = new State[317];
  private static string[] nonTerms = new string[] {
      "Program", "_ANY", "tkClassOpen", "tkDefs", "_Defs_set", "_ClassMethodBody_set", 
      "_MethodBody_set", "tkDirectiveHeader", "_Class_set", "tkInterf", "_Program_set", 
      "Params", "Block", "Attribute", "Tk", "Tk2", "ProgramNode", "ClassNode", 
      "InterfacePart", "InterfNode", "Field", "Class", "Method", "MethodHeader", 
      "MethodBody", "MethodLocals", "ClassMethod", "ClassMethodBody", "Defs", 
      "FieldOrClass", "Directive", "DirectiveHeader", "InitFinal", "CodeToken", 
      "_ANY5", "_ANY6", "_ANY7", "_ANY8", "_ANY9", "_ANY10", "_", "_11", "_12", 
      "_13", "_14", "_Tk2_list", "__ANY7_list", "__class_opt", "_InterfNode_list", 
      "_Field_list", "_Params_list", "_DirectiveHeader_list", "__ANY8_list", 
      "__ANY9_list", "_CodeToken_list", "$accept", };

  static Parser() {
    states[0] = new State(-46,new int[]{-1,1,-11,3}, new int[]{1,0});
    states[1] = new State(new int[]{3,2},new int[]{}, new int[]{1,1});
    states[2] = new State(-1,new int[]{}, new int[]{1,2});
    states[3] = new State(new int[]{6,37,26,67,15,220,16,221,17,222,30,223,4,170,5,171,23,130,22,159,29,173,14,174,12,180,10,275,13,314,27,225,2,316,8,-275},new int[]{-44,4,-17,34,-13,35,-29,69,-45,70,-4,219,-21,262,-15,168,-12,172,-23,263,-24,264,-48,273,-33,274,-19,304,-10,305,-14,315}, new int[]{65,1});
    states[4] = new State(-273,new int[]{-47,5}, new int[]{65,2});
    states[5] = new State(new int[]{4,7,5,8,6,9,7,10,8,11,9,12,10,13,11,14,12,15,13,16,14,17,15,18,16,19,17,20,18,21,19,22,20,23,21,24,22,25,23,26,24,27,25,28,26,29,27,30,28,31,29,32,30,33,3,-65},new int[]{-37,6}, new int[]{65,3});
    states[6] = new State(-274,new int[]{}, new int[]{274,2});
    states[7] = new State(-155,new int[]{}, new int[]{155,1});
    states[8] = new State(-156,new int[]{}, new int[]{156,1});
    states[9] = new State(-157,new int[]{}, new int[]{157,1});
    states[10] = new State(-158,new int[]{}, new int[]{158,1});
    states[11] = new State(-159,new int[]{}, new int[]{159,1});
    states[12] = new State(-160,new int[]{}, new int[]{160,1});
    states[13] = new State(-161,new int[]{}, new int[]{161,1});
    states[14] = new State(-162,new int[]{}, new int[]{162,1});
    states[15] = new State(-163,new int[]{}, new int[]{163,1});
    states[16] = new State(-164,new int[]{}, new int[]{164,1});
    states[17] = new State(-165,new int[]{}, new int[]{165,1});
    states[18] = new State(-166,new int[]{}, new int[]{166,1});
    states[19] = new State(-167,new int[]{}, new int[]{167,1});
    states[20] = new State(-168,new int[]{}, new int[]{168,1});
    states[21] = new State(-169,new int[]{}, new int[]{169,1});
    states[22] = new State(-170,new int[]{}, new int[]{170,1});
    states[23] = new State(-171,new int[]{}, new int[]{171,1});
    states[24] = new State(-172,new int[]{}, new int[]{172,1});
    states[25] = new State(-173,new int[]{}, new int[]{173,1});
    states[26] = new State(-174,new int[]{}, new int[]{174,1});
    states[27] = new State(-175,new int[]{}, new int[]{175,1});
    states[28] = new State(-176,new int[]{}, new int[]{176,1});
    states[29] = new State(-177,new int[]{}, new int[]{177,1});
    states[30] = new State(-178,new int[]{}, new int[]{178,1});
    states[31] = new State(-179,new int[]{}, new int[]{179,1});
    states[32] = new State(-180,new int[]{}, new int[]{180,1});
    states[33] = new State(-181,new int[]{}, new int[]{181,1});
    states[34] = new State(-47,new int[]{}, new int[]{47,2});
    states[35] = new State(new int[]{29,36},new int[]{}, new int[]{267,1});
    states[36] = new State(-267,new int[]{}, new int[]{267,2});
    states[37] = new State(-261,new int[]{-42,38}, new int[]{50,1});
    states[38] = new State(new int[]{26,39,4,42,5,43,7,44,8,45,9,46,10,47,11,48,12,49,13,50,14,51,15,52,16,53,17,54,18,55,19,56,20,57,21,58,22,59,23,60,24,61,25,62,27,63,28,64,29,65,30,66,6,37},new int[]{-35,40,-13,41}, new int[]{50,2});
    states[39] = new State(-50,new int[]{}, new int[]{50,3});
    states[40] = new State(-262,new int[]{}, new int[]{262,2});
    states[41] = new State(-263,new int[]{}, new int[]{263,2});
    states[42] = new State(-105,new int[]{}, new int[]{105,1});
    states[43] = new State(-106,new int[]{}, new int[]{106,1});
    states[44] = new State(-107,new int[]{}, new int[]{107,1});
    states[45] = new State(-108,new int[]{}, new int[]{108,1});
    states[46] = new State(-109,new int[]{}, new int[]{109,1});
    states[47] = new State(-110,new int[]{}, new int[]{110,1});
    states[48] = new State(-111,new int[]{}, new int[]{111,1});
    states[49] = new State(-112,new int[]{}, new int[]{112,1});
    states[50] = new State(-113,new int[]{}, new int[]{113,1});
    states[51] = new State(-114,new int[]{}, new int[]{114,1});
    states[52] = new State(-115,new int[]{}, new int[]{115,1});
    states[53] = new State(-116,new int[]{}, new int[]{116,1});
    states[54] = new State(-117,new int[]{}, new int[]{117,1});
    states[55] = new State(-118,new int[]{}, new int[]{118,1});
    states[56] = new State(-119,new int[]{}, new int[]{119,1});
    states[57] = new State(-120,new int[]{}, new int[]{120,1});
    states[58] = new State(-121,new int[]{}, new int[]{121,1});
    states[59] = new State(-122,new int[]{}, new int[]{122,1});
    states[60] = new State(-123,new int[]{}, new int[]{123,1});
    states[61] = new State(-124,new int[]{}, new int[]{124,1});
    states[62] = new State(-125,new int[]{}, new int[]{125,1});
    states[63] = new State(-126,new int[]{}, new int[]{126,1});
    states[64] = new State(-127,new int[]{}, new int[]{127,1});
    states[65] = new State(-128,new int[]{}, new int[]{128,1});
    states[66] = new State(-129,new int[]{}, new int[]{129,1});
    states[67] = new State(new int[]{29,68},new int[]{}, new int[]{268,1});
    states[68] = new State(-268,new int[]{}, new int[]{268,2});
    states[69] = new State(-66,new int[]{}, new int[]{66,1});
    states[70] = new State(new int[]{4,170,5,171,23,130,22,159,29,173,14,174},new int[]{-5,71,-30,261,-21,73,-15,74,-12,172,-22,260}, new int[]{97,1});
    states[71] = new State(new int[]{4,170,5,171,23,130,22,159,29,173,14,174,6,-97,26,-97,15,-97,16,-97,17,-97,30,-97,12,-97,10,-97,13,-97,27,-97,2,-97,8,-97,11,-97},new int[]{-30,72,-21,73,-15,74,-12,172,-22,260}, new int[]{97,2});
    states[72] = new State(-33,new int[]{}, new int[]{33,2});
    states[73] = new State(-98,new int[]{}, new int[]{98,1});
    states[74] = new State(-271,new int[]{-46,75}, new int[]{84,1,86,1});
    states[75] = new State(new int[]{25,76,12,257,13,258,14,259,4,127,5,128,23,130,22,159,29,162,8,163,30,164,27,165,28,166,17,167},new int[]{-3,77,-16,126,-12,129}, new int[]{84,2,86,2});
    states[76] = new State(-84,new int[]{}, new int[]{84,3});
    states[77] = new State(-281,new int[]{-51,78}, new int[]{86,3});
    states[78] = new State(new int[]{23,130,22,159,26,-43,7,-43,12,-43,27,-43,2,-43,8,-43,4,-43,5,-43,29,-43,14,-43},new int[]{-9,79,-12,256}, new int[]{86,4});
    states[79] = new State(new int[]{26,80,7,83,12,180,27,225,2,255,8,-275,4,-275,5,-275,23,-275,22,-275,29,-275,14,-275},new int[]{-18,82,-48,84,-27,181,-24,182,-14,224}, new int[]{86,5});
    states[80] = new State(new int[]{25,81},new int[]{}, new int[]{86,6});
    states[81] = new State(-86,new int[]{}, new int[]{86,7});
    states[82] = new State(-44,new int[]{}, new int[]{44,2});
    states[83] = new State(-73,new int[]{}, new int[]{73,1});
    states[84] = new State(new int[]{8,86,4,170,5,171,23,130,22,159,29,173,14,174},new int[]{-21,85,-15,168,-12,172}, new int[]{74,1,88,1});
    states[85] = new State(-74,new int[]{}, new int[]{74,2});
    states[86] = new State(-271,new int[]{-46,87}, new int[]{88,2});
    states[87] = new State(new int[]{25,88,4,127,5,128,23,130,22,159,29,162,8,163,30,164,27,165,28,166,17,167},new int[]{-16,126,-12,129}, new int[]{88,3});
    states[88] = new State(-283,new int[]{-52,89}, new int[]{88,4});
    states[89] = new State(new int[]{18,121,19,122,20,123,21,124,22,125,9,-88,6,-88,15,-88,16,-88,17,-88,30,-88,12,-88,8,-88,26,-88,7,-88,27,-88,2,-88,4,-88,5,-88,23,-88,29,-88,14,-88,11,-88},new int[]{-32,90,-8,91}, new int[]{88,5});
    states[90] = new State(-284,new int[]{}, new int[]{284,2});
    states[91] = new State(-287,new int[]{-54,92}, new int[]{101,1});
    states[92] = new State(new int[]{25,93,4,95,5,96,6,97,7,98,8,99,9,100,10,101,11,102,12,103,13,104,14,105,15,106,16,107,17,108,18,109,19,110,20,111,21,112,22,113,23,114,24,115,26,116,27,117,28,118,29,119,30,120},new int[]{-39,94}, new int[]{101,2});
    states[93] = new State(-101,new int[]{}, new int[]{101,3});
    states[94] = new State(-288,new int[]{}, new int[]{288,2});
    states[95] = new State(-208,new int[]{}, new int[]{208,1});
    states[96] = new State(-209,new int[]{}, new int[]{209,1});
    states[97] = new State(-210,new int[]{}, new int[]{210,1});
    states[98] = new State(-211,new int[]{}, new int[]{211,1});
    states[99] = new State(-212,new int[]{}, new int[]{212,1});
    states[100] = new State(-213,new int[]{}, new int[]{213,1});
    states[101] = new State(-214,new int[]{}, new int[]{214,1});
    states[102] = new State(-215,new int[]{}, new int[]{215,1});
    states[103] = new State(-216,new int[]{}, new int[]{216,1});
    states[104] = new State(-217,new int[]{}, new int[]{217,1});
    states[105] = new State(-218,new int[]{}, new int[]{218,1});
    states[106] = new State(-219,new int[]{}, new int[]{219,1});
    states[107] = new State(-220,new int[]{}, new int[]{220,1});
    states[108] = new State(-221,new int[]{}, new int[]{221,1});
    states[109] = new State(-222,new int[]{}, new int[]{222,1});
    states[110] = new State(-223,new int[]{}, new int[]{223,1});
    states[111] = new State(-224,new int[]{}, new int[]{224,1});
    states[112] = new State(-225,new int[]{}, new int[]{225,1});
    states[113] = new State(-226,new int[]{}, new int[]{226,1});
    states[114] = new State(-227,new int[]{}, new int[]{227,1});
    states[115] = new State(-228,new int[]{}, new int[]{228,1});
    states[116] = new State(-229,new int[]{}, new int[]{229,1});
    states[117] = new State(-230,new int[]{}, new int[]{230,1});
    states[118] = new State(-231,new int[]{}, new int[]{231,1});
    states[119] = new State(-232,new int[]{}, new int[]{232,1});
    states[120] = new State(-233,new int[]{}, new int[]{233,1});
    states[121] = new State(-38,new int[]{}, new int[]{38,1});
    states[122] = new State(-39,new int[]{}, new int[]{39,1});
    states[123] = new State(-40,new int[]{}, new int[]{40,1});
    states[124] = new State(-41,new int[]{}, new int[]{41,1});
    states[125] = new State(-42,new int[]{}, new int[]{42,1});
    states[126] = new State(-272,new int[]{}, new int[]{272,2});
    states[127] = new State(-56,new int[]{}, new int[]{56,1});
    states[128] = new State(-57,new int[]{}, new int[]{57,1});
    states[129] = new State(-58,new int[]{}, new int[]{58,1});
    states[130] = new State(-258,new int[]{-41,131}, new int[]{48,1});
    states[131] = new State(new int[]{24,132,4,135,5,136,6,137,7,138,8,139,9,140,10,141,11,142,12,143,13,144,14,145,15,146,16,147,17,148,18,149,19,150,20,151,21,152,25,153,26,154,27,155,28,156,29,157,30,158,23,130,22,159},new int[]{-2,133,-12,134}, new int[]{48,2});
    states[132] = new State(-48,new int[]{}, new int[]{48,3});
    states[133] = new State(-259,new int[]{}, new int[]{259,2});
    states[134] = new State(-260,new int[]{}, new int[]{260,2});
    states[135] = new State(-2,new int[]{}, new int[]{2,1});
    states[136] = new State(-3,new int[]{}, new int[]{3,1});
    states[137] = new State(-4,new int[]{}, new int[]{4,1});
    states[138] = new State(-5,new int[]{}, new int[]{5,1});
    states[139] = new State(-6,new int[]{}, new int[]{6,1});
    states[140] = new State(-7,new int[]{}, new int[]{7,1});
    states[141] = new State(-8,new int[]{}, new int[]{8,1});
    states[142] = new State(-9,new int[]{}, new int[]{9,1});
    states[143] = new State(-10,new int[]{}, new int[]{10,1});
    states[144] = new State(-11,new int[]{}, new int[]{11,1});
    states[145] = new State(-12,new int[]{}, new int[]{12,1});
    states[146] = new State(-13,new int[]{}, new int[]{13,1});
    states[147] = new State(-14,new int[]{}, new int[]{14,1});
    states[148] = new State(-15,new int[]{}, new int[]{15,1});
    states[149] = new State(-16,new int[]{}, new int[]{16,1});
    states[150] = new State(-17,new int[]{}, new int[]{17,1});
    states[151] = new State(-18,new int[]{}, new int[]{18,1});
    states[152] = new State(-19,new int[]{}, new int[]{19,1});
    states[153] = new State(-20,new int[]{}, new int[]{20,1});
    states[154] = new State(-21,new int[]{}, new int[]{21,1});
    states[155] = new State(-22,new int[]{}, new int[]{22,1});
    states[156] = new State(-23,new int[]{}, new int[]{23,1});
    states[157] = new State(-24,new int[]{}, new int[]{24,1});
    states[158] = new State(-25,new int[]{}, new int[]{25,1});
    states[159] = new State(-271,new int[]{-46,160}, new int[]{49,1});
    states[160] = new State(new int[]{25,161,4,127,5,128,23,130,22,159,29,162,8,163,30,164,27,165,28,166,17,167},new int[]{-16,126,-12,129}, new int[]{49,2});
    states[161] = new State(-49,new int[]{}, new int[]{49,3});
    states[162] = new State(-59,new int[]{}, new int[]{59,1});
    states[163] = new State(-60,new int[]{}, new int[]{60,1});
    states[164] = new State(-61,new int[]{}, new int[]{61,1});
    states[165] = new State(-62,new int[]{}, new int[]{62,1});
    states[166] = new State(-63,new int[]{}, new int[]{63,1});
    states[167] = new State(-64,new int[]{}, new int[]{64,1});
    states[168] = new State(-271,new int[]{-46,169}, new int[]{84,1});
    states[169] = new State(new int[]{25,76,4,127,5,128,23,130,22,159,29,162,8,163,30,164,27,165,28,166,17,167},new int[]{-16,126,-12,129}, new int[]{84,2});
    states[170] = new State(-52,new int[]{}, new int[]{52,1});
    states[171] = new State(-53,new int[]{}, new int[]{53,1});
    states[172] = new State(-54,new int[]{}, new int[]{54,1});
    states[173] = new State(-55,new int[]{}, new int[]{55,1});
    states[174] = new State(-279,new int[]{-50,175}, new int[]{85,1});
    states[175] = new State(new int[]{26,176,4,170,5,171,23,130,22,159,29,173,14,174},new int[]{-21,179,-15,168,-12,172}, new int[]{85,2});
    states[176] = new State(-271,new int[]{-46,177}, new int[]{85,3});
    states[177] = new State(new int[]{25,178,4,127,5,128,23,130,22,159,29,162,8,163,30,164,27,165,28,166,17,167},new int[]{-16,126,-12,129}, new int[]{85,4});
    states[178] = new State(-85,new int[]{}, new int[]{85,5});
    states[179] = new State(-280,new int[]{}, new int[]{280,2});
    states[180] = new State(-276,new int[]{}, new int[]{276,1});
    states[181] = new State(-75,new int[]{}, new int[]{75,1});
    states[182] = new State(new int[]{9,185,26,-94,7,-94,12,-94,27,-94,2,-94,8,-94,4,-94,5,-94,23,-94,22,-94,29,-94,14,-94,6,-34,15,-34,16,-34,17,-34,30,-34},new int[]{-28,183,-31,184,-6,215}, new int[]{93,1});
    states[183] = new State(-93,new int[]{}, new int[]{93,2});
    states[184] = new State(-95,new int[]{}, new int[]{95,1});
    states[185] = new State(-285,new int[]{-53,186}, new int[]{100,1});
    states[186] = new State(new int[]{25,187,4,189,5,190,6,191,7,192,8,193,9,194,10,195,11,196,12,197,13,198,14,199,15,200,16,201,17,202,18,203,19,204,20,205,21,206,22,207,23,208,24,209,26,210,27,211,28,212,29,213,30,214},new int[]{-38,188}, new int[]{100,2});
    states[187] = new State(-100,new int[]{}, new int[]{100,3});
    states[188] = new State(-286,new int[]{}, new int[]{286,2});
    states[189] = new State(-182,new int[]{}, new int[]{182,1});
    states[190] = new State(-183,new int[]{}, new int[]{183,1});
    states[191] = new State(-184,new int[]{}, new int[]{184,1});
    states[192] = new State(-185,new int[]{}, new int[]{185,1});
    states[193] = new State(-186,new int[]{}, new int[]{186,1});
    states[194] = new State(-187,new int[]{}, new int[]{187,1});
    states[195] = new State(-188,new int[]{}, new int[]{188,1});
    states[196] = new State(-189,new int[]{}, new int[]{189,1});
    states[197] = new State(-190,new int[]{}, new int[]{190,1});
    states[198] = new State(-191,new int[]{}, new int[]{191,1});
    states[199] = new State(-192,new int[]{}, new int[]{192,1});
    states[200] = new State(-193,new int[]{}, new int[]{193,1});
    states[201] = new State(-194,new int[]{}, new int[]{194,1});
    states[202] = new State(-195,new int[]{}, new int[]{195,1});
    states[203] = new State(-196,new int[]{}, new int[]{196,1});
    states[204] = new State(-197,new int[]{}, new int[]{197,1});
    states[205] = new State(-198,new int[]{}, new int[]{198,1});
    states[206] = new State(-199,new int[]{}, new int[]{199,1});
    states[207] = new State(-200,new int[]{}, new int[]{200,1});
    states[208] = new State(-201,new int[]{}, new int[]{201,1});
    states[209] = new State(-202,new int[]{}, new int[]{202,1});
    states[210] = new State(-203,new int[]{}, new int[]{203,1});
    states[211] = new State(-204,new int[]{}, new int[]{204,1});
    states[212] = new State(-205,new int[]{}, new int[]{205,1});
    states[213] = new State(-206,new int[]{}, new int[]{206,1});
    states[214] = new State(-207,new int[]{}, new int[]{207,1});
    states[215] = new State(new int[]{6,37,15,220,16,221,17,222,30,223},new int[]{-13,216,-29,218,-45,70,-4,219}, new int[]{96,1});
    states[216] = new State(new int[]{25,217},new int[]{}, new int[]{96,2});
    states[217] = new State(-96,new int[]{}, new int[]{96,3});
    states[218] = new State(-35,new int[]{}, new int[]{35,2});
    states[219] = new State(-269,new int[]{}, new int[]{269,1});
    states[220] = new State(-29,new int[]{}, new int[]{29,1});
    states[221] = new State(-30,new int[]{}, new int[]{30,1});
    states[222] = new State(-31,new int[]{}, new int[]{31,1});
    states[223] = new State(-270,new int[]{}, new int[]{270,1});
    states[224] = new State(-76,new int[]{}, new int[]{76,1});
    states[225] = new State(-264,new int[]{-43,226}, new int[]{51,1});
    states[226] = new State(new int[]{28,227,4,230,5,231,6,232,7,233,8,234,9,235,10,236,11,237,12,238,13,239,14,240,15,241,16,242,17,243,18,244,19,245,20,246,21,247,22,248,23,249,24,250,25,251,26,252,29,253,30,254,27,225},new int[]{-36,228,-14,229}, new int[]{51,2});
    states[227] = new State(-51,new int[]{}, new int[]{51,3});
    states[228] = new State(-265,new int[]{}, new int[]{265,2});
    states[229] = new State(-266,new int[]{}, new int[]{266,2});
    states[230] = new State(-130,new int[]{}, new int[]{130,1});
    states[231] = new State(-131,new int[]{}, new int[]{131,1});
    states[232] = new State(-132,new int[]{}, new int[]{132,1});
    states[233] = new State(-133,new int[]{}, new int[]{133,1});
    states[234] = new State(-134,new int[]{}, new int[]{134,1});
    states[235] = new State(-135,new int[]{}, new int[]{135,1});
    states[236] = new State(-136,new int[]{}, new int[]{136,1});
    states[237] = new State(-137,new int[]{}, new int[]{137,1});
    states[238] = new State(-138,new int[]{}, new int[]{138,1});
    states[239] = new State(-139,new int[]{}, new int[]{139,1});
    states[240] = new State(-140,new int[]{}, new int[]{140,1});
    states[241] = new State(-141,new int[]{}, new int[]{141,1});
    states[242] = new State(-142,new int[]{}, new int[]{142,1});
    states[243] = new State(-143,new int[]{}, new int[]{143,1});
    states[244] = new State(-144,new int[]{}, new int[]{144,1});
    states[245] = new State(-145,new int[]{}, new int[]{145,1});
    states[246] = new State(-146,new int[]{}, new int[]{146,1});
    states[247] = new State(-147,new int[]{}, new int[]{147,1});
    states[248] = new State(-148,new int[]{}, new int[]{148,1});
    states[249] = new State(-149,new int[]{}, new int[]{149,1});
    states[250] = new State(-150,new int[]{}, new int[]{150,1});
    states[251] = new State(-151,new int[]{}, new int[]{151,1});
    states[252] = new State(-152,new int[]{}, new int[]{152,1});
    states[253] = new State(-153,new int[]{}, new int[]{153,1});
    states[254] = new State(-154,new int[]{}, new int[]{154,1});
    states[255] = new State(-77,new int[]{}, new int[]{77,1});
    states[256] = new State(-282,new int[]{}, new int[]{282,2});
    states[257] = new State(-26,new int[]{}, new int[]{26,1});
    states[258] = new State(-27,new int[]{}, new int[]{27,1});
    states[259] = new State(-28,new int[]{}, new int[]{28,1});
    states[260] = new State(-99,new int[]{}, new int[]{99,1});
    states[261] = new State(-32,new int[]{}, new int[]{32,1});
    states[262] = new State(-67,new int[]{}, new int[]{67,1});
    states[263] = new State(-68,new int[]{}, new int[]{68,1});
    states[264] = new State(new int[]{9,185,6,-36,15,-36,16,-36,17,-36,30,-36,12,-36,8,-36},new int[]{-25,265,-31,266,-7,267}, new int[]{87,1});
    states[265] = new State(-87,new int[]{}, new int[]{87,2});
    states[266] = new State(-89,new int[]{}, new int[]{89,1});
    states[267] = new State(new int[]{6,37,15,220,16,221,17,222,30,223,12,180,8,-275},new int[]{-13,268,-26,270,-29,271,-45,70,-4,219,-23,272,-24,264,-48,273}, new int[]{90,1});
    states[268] = new State(new int[]{25,269},new int[]{}, new int[]{90,2});
    states[269] = new State(-90,new int[]{}, new int[]{90,3});
    states[270] = new State(-37,new int[]{}, new int[]{37,2});
    states[271] = new State(-91,new int[]{}, new int[]{91,1});
    states[272] = new State(-92,new int[]{}, new int[]{92,1});
    states[273] = new State(new int[]{8,86},new int[]{}, new int[]{88,1});
    states[274] = new State(-69,new int[]{}, new int[]{69,1});
    states[275] = new State(-289,new int[]{-55,276}, new int[]{102,1});
    states[276] = new State(new int[]{4,279,5,280,7,281,8,282,9,283,11,284,12,285,13,286,14,287,15,288,16,289,17,290,18,291,19,292,20,293,21,294,22,295,23,296,24,297,25,298,27,299,28,300,29,301,30,302,6,37,26,-102,10,-102,2,-102},new int[]{-34,277,-40,278,-13,303}, new int[]{102,2});
    states[277] = new State(-290,new int[]{}, new int[]{290,2});
    states[278] = new State(-103,new int[]{}, new int[]{103,1});
    states[279] = new State(-234,new int[]{}, new int[]{234,1});
    states[280] = new State(-235,new int[]{}, new int[]{235,1});
    states[281] = new State(-236,new int[]{}, new int[]{236,1});
    states[282] = new State(-237,new int[]{}, new int[]{237,1});
    states[283] = new State(-238,new int[]{}, new int[]{238,1});
    states[284] = new State(-239,new int[]{}, new int[]{239,1});
    states[285] = new State(-240,new int[]{}, new int[]{240,1});
    states[286] = new State(-241,new int[]{}, new int[]{241,1});
    states[287] = new State(-242,new int[]{}, new int[]{242,1});
    states[288] = new State(-243,new int[]{}, new int[]{243,1});
    states[289] = new State(-244,new int[]{}, new int[]{244,1});
    states[290] = new State(-245,new int[]{}, new int[]{245,1});
    states[291] = new State(-246,new int[]{}, new int[]{246,1});
    states[292] = new State(-247,new int[]{}, new int[]{247,1});
    states[293] = new State(-248,new int[]{}, new int[]{248,1});
    states[294] = new State(-249,new int[]{}, new int[]{249,1});
    states[295] = new State(-250,new int[]{}, new int[]{250,1});
    states[296] = new State(-251,new int[]{}, new int[]{251,1});
    states[297] = new State(-252,new int[]{}, new int[]{252,1});
    states[298] = new State(-253,new int[]{}, new int[]{253,1});
    states[299] = new State(-254,new int[]{}, new int[]{254,1});
    states[300] = new State(-255,new int[]{}, new int[]{255,1});
    states[301] = new State(-256,new int[]{}, new int[]{256,1});
    states[302] = new State(-257,new int[]{}, new int[]{257,1});
    states[303] = new State(-104,new int[]{}, new int[]{104,1});
    states[304] = new State(-70,new int[]{}, new int[]{70,1});
    states[305] = new State(-277,new int[]{-49,306}, new int[]{78,1});
    states[306] = new State(new int[]{11,307,15,220,16,221,17,222,30,223,4,170,5,171,23,130,22,159,29,173,14,174,12,180,27,225,2,313,8,-275},new int[]{-20,308,-29,309,-45,70,-4,219,-21,310,-15,168,-12,172,-24,311,-48,273,-14,312}, new int[]{78,2});
    states[307] = new State(-78,new int[]{}, new int[]{78,3});
    states[308] = new State(-278,new int[]{}, new int[]{278,2});
    states[309] = new State(-79,new int[]{}, new int[]{79,1});
    states[310] = new State(-80,new int[]{}, new int[]{80,1});
    states[311] = new State(-81,new int[]{}, new int[]{81,1});
    states[312] = new State(-82,new int[]{}, new int[]{82,1});
    states[313] = new State(-83,new int[]{}, new int[]{83,1});
    states[314] = new State(-45,new int[]{}, new int[]{45,1});
    states[315] = new State(-71,new int[]{}, new int[]{71,1});
    states[316] = new State(-72,new int[]{}, new int[]{72,1});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-56, new int[]{-1,3});
    rules[2] = new Rule(-2, new int[]{4});
    rules[3] = new Rule(-2, new int[]{5});
    rules[4] = new Rule(-2, new int[]{6});
    rules[5] = new Rule(-2, new int[]{7});
    rules[6] = new Rule(-2, new int[]{8});
    rules[7] = new Rule(-2, new int[]{9});
    rules[8] = new Rule(-2, new int[]{10});
    rules[9] = new Rule(-2, new int[]{11});
    rules[10] = new Rule(-2, new int[]{12});
    rules[11] = new Rule(-2, new int[]{13});
    rules[12] = new Rule(-2, new int[]{14});
    rules[13] = new Rule(-2, new int[]{15});
    rules[14] = new Rule(-2, new int[]{16});
    rules[15] = new Rule(-2, new int[]{17});
    rules[16] = new Rule(-2, new int[]{18});
    rules[17] = new Rule(-2, new int[]{19});
    rules[18] = new Rule(-2, new int[]{20});
    rules[19] = new Rule(-2, new int[]{21});
    rules[20] = new Rule(-2, new int[]{25});
    rules[21] = new Rule(-2, new int[]{26});
    rules[22] = new Rule(-2, new int[]{27});
    rules[23] = new Rule(-2, new int[]{28});
    rules[24] = new Rule(-2, new int[]{29});
    rules[25] = new Rule(-2, new int[]{30});
    rules[26] = new Rule(-3, new int[]{12});
    rules[27] = new Rule(-3, new int[]{13});
    rules[28] = new Rule(-3, new int[]{14});
    rules[29] = new Rule(-4, new int[]{15});
    rules[30] = new Rule(-4, new int[]{16});
    rules[31] = new Rule(-4, new int[]{17});
    rules[32] = new Rule(-5, new int[]{-30});
    rules[33] = new Rule(-5, new int[]{-5,-30});
    rules[34] = new Rule(-6, new int[]{});
    rules[35] = new Rule(-6, new int[]{-6,-29});
    rules[36] = new Rule(-7, new int[]{});
    rules[37] = new Rule(-7, new int[]{-7,-26});
    rules[38] = new Rule(-8, new int[]{18});
    rules[39] = new Rule(-8, new int[]{19});
    rules[40] = new Rule(-8, new int[]{20});
    rules[41] = new Rule(-8, new int[]{21});
    rules[42] = new Rule(-8, new int[]{22});
    rules[43] = new Rule(-9, new int[]{});
    rules[44] = new Rule(-9, new int[]{-9,-18});
    rules[45] = new Rule(-10, new int[]{13});
    rules[46] = new Rule(-11, new int[]{});
    rules[47] = new Rule(-11, new int[]{-11,-17});
    rules[48] = new Rule(-12, new int[]{23,-41,24});
    rules[49] = new Rule(-12, new int[]{22,-46,25});
    rules[50] = new Rule(-13, new int[]{6,-42,26});
    rules[51] = new Rule(-14, new int[]{27,-43,28});
    rules[52] = new Rule(-15, new int[]{4});
    rules[53] = new Rule(-15, new int[]{5});
    rules[54] = new Rule(-15, new int[]{-12});
    rules[55] = new Rule(-15, new int[]{29});
    rules[56] = new Rule(-16, new int[]{4});
    rules[57] = new Rule(-16, new int[]{5});
    rules[58] = new Rule(-16, new int[]{-12});
    rules[59] = new Rule(-16, new int[]{29});
    rules[60] = new Rule(-16, new int[]{8});
    rules[61] = new Rule(-16, new int[]{30});
    rules[62] = new Rule(-16, new int[]{27});
    rules[63] = new Rule(-16, new int[]{28});
    rules[64] = new Rule(-16, new int[]{17});
    rules[65] = new Rule(-1, new int[]{-11,-44,-47});
    rules[66] = new Rule(-17, new int[]{-29});
    rules[67] = new Rule(-17, new int[]{-21});
    rules[68] = new Rule(-17, new int[]{-23});
    rules[69] = new Rule(-17, new int[]{-33});
    rules[70] = new Rule(-17, new int[]{-19});
    rules[71] = new Rule(-17, new int[]{-14});
    rules[72] = new Rule(-17, new int[]{2});
    rules[73] = new Rule(-18, new int[]{7});
    rules[74] = new Rule(-18, new int[]{-48,-21});
    rules[75] = new Rule(-18, new int[]{-27});
    rules[76] = new Rule(-18, new int[]{-14});
    rules[77] = new Rule(-18, new int[]{2});
    rules[78] = new Rule(-19, new int[]{-10,-49,11});
    rules[79] = new Rule(-20, new int[]{-29});
    rules[80] = new Rule(-20, new int[]{-21});
    rules[81] = new Rule(-20, new int[]{-24});
    rules[82] = new Rule(-20, new int[]{-14});
    rules[83] = new Rule(-20, new int[]{2});
    rules[84] = new Rule(-21, new int[]{-15,-46,25});
    rules[85] = new Rule(-21, new int[]{14,-50,26,-46,25});
    rules[86] = new Rule(-22, new int[]{-15,-46,-3,-51,-9,26,25});
    rules[87] = new Rule(-23, new int[]{-24,-25});
    rules[88] = new Rule(-24, new int[]{-48,8,-46,25,-52});
    rules[89] = new Rule(-25, new int[]{-31});
    rules[90] = new Rule(-25, new int[]{-7,-13,25});
    rules[91] = new Rule(-26, new int[]{-29});
    rules[92] = new Rule(-26, new int[]{-23});
    rules[93] = new Rule(-27, new int[]{-24,-28});
    rules[94] = new Rule(-28, new int[]{});
    rules[95] = new Rule(-28, new int[]{-31});
    rules[96] = new Rule(-28, new int[]{-6,-13,25});
    rules[97] = new Rule(-29, new int[]{-45,-5});
    rules[98] = new Rule(-30, new int[]{-21});
    rules[99] = new Rule(-30, new int[]{-22});
    rules[100] = new Rule(-31, new int[]{9,-53,25});
    rules[101] = new Rule(-32, new int[]{-8,-54,25});
    rules[102] = new Rule(-33, new int[]{10,-55});
    rules[103] = new Rule(-34, new int[]{-40});
    rules[104] = new Rule(-34, new int[]{-13});
    rules[105] = new Rule(-35, new int[]{4});
    rules[106] = new Rule(-35, new int[]{5});
    rules[107] = new Rule(-35, new int[]{7});
    rules[108] = new Rule(-35, new int[]{8});
    rules[109] = new Rule(-35, new int[]{9});
    rules[110] = new Rule(-35, new int[]{10});
    rules[111] = new Rule(-35, new int[]{11});
    rules[112] = new Rule(-35, new int[]{12});
    rules[113] = new Rule(-35, new int[]{13});
    rules[114] = new Rule(-35, new int[]{14});
    rules[115] = new Rule(-35, new int[]{15});
    rules[116] = new Rule(-35, new int[]{16});
    rules[117] = new Rule(-35, new int[]{17});
    rules[118] = new Rule(-35, new int[]{18});
    rules[119] = new Rule(-35, new int[]{19});
    rules[120] = new Rule(-35, new int[]{20});
    rules[121] = new Rule(-35, new int[]{21});
    rules[122] = new Rule(-35, new int[]{22});
    rules[123] = new Rule(-35, new int[]{23});
    rules[124] = new Rule(-35, new int[]{24});
    rules[125] = new Rule(-35, new int[]{25});
    rules[126] = new Rule(-35, new int[]{27});
    rules[127] = new Rule(-35, new int[]{28});
    rules[128] = new Rule(-35, new int[]{29});
    rules[129] = new Rule(-35, new int[]{30});
    rules[130] = new Rule(-36, new int[]{4});
    rules[131] = new Rule(-36, new int[]{5});
    rules[132] = new Rule(-36, new int[]{6});
    rules[133] = new Rule(-36, new int[]{7});
    rules[134] = new Rule(-36, new int[]{8});
    rules[135] = new Rule(-36, new int[]{9});
    rules[136] = new Rule(-36, new int[]{10});
    rules[137] = new Rule(-36, new int[]{11});
    rules[138] = new Rule(-36, new int[]{12});
    rules[139] = new Rule(-36, new int[]{13});
    rules[140] = new Rule(-36, new int[]{14});
    rules[141] = new Rule(-36, new int[]{15});
    rules[142] = new Rule(-36, new int[]{16});
    rules[143] = new Rule(-36, new int[]{17});
    rules[144] = new Rule(-36, new int[]{18});
    rules[145] = new Rule(-36, new int[]{19});
    rules[146] = new Rule(-36, new int[]{20});
    rules[147] = new Rule(-36, new int[]{21});
    rules[148] = new Rule(-36, new int[]{22});
    rules[149] = new Rule(-36, new int[]{23});
    rules[150] = new Rule(-36, new int[]{24});
    rules[151] = new Rule(-36, new int[]{25});
    rules[152] = new Rule(-36, new int[]{26});
    rules[153] = new Rule(-36, new int[]{29});
    rules[154] = new Rule(-36, new int[]{30});
    rules[155] = new Rule(-37, new int[]{4});
    rules[156] = new Rule(-37, new int[]{5});
    rules[157] = new Rule(-37, new int[]{6});
    rules[158] = new Rule(-37, new int[]{7});
    rules[159] = new Rule(-37, new int[]{8});
    rules[160] = new Rule(-37, new int[]{9});
    rules[161] = new Rule(-37, new int[]{10});
    rules[162] = new Rule(-37, new int[]{11});
    rules[163] = new Rule(-37, new int[]{12});
    rules[164] = new Rule(-37, new int[]{13});
    rules[165] = new Rule(-37, new int[]{14});
    rules[166] = new Rule(-37, new int[]{15});
    rules[167] = new Rule(-37, new int[]{16});
    rules[168] = new Rule(-37, new int[]{17});
    rules[169] = new Rule(-37, new int[]{18});
    rules[170] = new Rule(-37, new int[]{19});
    rules[171] = new Rule(-37, new int[]{20});
    rules[172] = new Rule(-37, new int[]{21});
    rules[173] = new Rule(-37, new int[]{22});
    rules[174] = new Rule(-37, new int[]{23});
    rules[175] = new Rule(-37, new int[]{24});
    rules[176] = new Rule(-37, new int[]{25});
    rules[177] = new Rule(-37, new int[]{26});
    rules[178] = new Rule(-37, new int[]{27});
    rules[179] = new Rule(-37, new int[]{28});
    rules[180] = new Rule(-37, new int[]{29});
    rules[181] = new Rule(-37, new int[]{30});
    rules[182] = new Rule(-38, new int[]{4});
    rules[183] = new Rule(-38, new int[]{5});
    rules[184] = new Rule(-38, new int[]{6});
    rules[185] = new Rule(-38, new int[]{7});
    rules[186] = new Rule(-38, new int[]{8});
    rules[187] = new Rule(-38, new int[]{9});
    rules[188] = new Rule(-38, new int[]{10});
    rules[189] = new Rule(-38, new int[]{11});
    rules[190] = new Rule(-38, new int[]{12});
    rules[191] = new Rule(-38, new int[]{13});
    rules[192] = new Rule(-38, new int[]{14});
    rules[193] = new Rule(-38, new int[]{15});
    rules[194] = new Rule(-38, new int[]{16});
    rules[195] = new Rule(-38, new int[]{17});
    rules[196] = new Rule(-38, new int[]{18});
    rules[197] = new Rule(-38, new int[]{19});
    rules[198] = new Rule(-38, new int[]{20});
    rules[199] = new Rule(-38, new int[]{21});
    rules[200] = new Rule(-38, new int[]{22});
    rules[201] = new Rule(-38, new int[]{23});
    rules[202] = new Rule(-38, new int[]{24});
    rules[203] = new Rule(-38, new int[]{26});
    rules[204] = new Rule(-38, new int[]{27});
    rules[205] = new Rule(-38, new int[]{28});
    rules[206] = new Rule(-38, new int[]{29});
    rules[207] = new Rule(-38, new int[]{30});
    rules[208] = new Rule(-39, new int[]{4});
    rules[209] = new Rule(-39, new int[]{5});
    rules[210] = new Rule(-39, new int[]{6});
    rules[211] = new Rule(-39, new int[]{7});
    rules[212] = new Rule(-39, new int[]{8});
    rules[213] = new Rule(-39, new int[]{9});
    rules[214] = new Rule(-39, new int[]{10});
    rules[215] = new Rule(-39, new int[]{11});
    rules[216] = new Rule(-39, new int[]{12});
    rules[217] = new Rule(-39, new int[]{13});
    rules[218] = new Rule(-39, new int[]{14});
    rules[219] = new Rule(-39, new int[]{15});
    rules[220] = new Rule(-39, new int[]{16});
    rules[221] = new Rule(-39, new int[]{17});
    rules[222] = new Rule(-39, new int[]{18});
    rules[223] = new Rule(-39, new int[]{19});
    rules[224] = new Rule(-39, new int[]{20});
    rules[225] = new Rule(-39, new int[]{21});
    rules[226] = new Rule(-39, new int[]{22});
    rules[227] = new Rule(-39, new int[]{23});
    rules[228] = new Rule(-39, new int[]{24});
    rules[229] = new Rule(-39, new int[]{26});
    rules[230] = new Rule(-39, new int[]{27});
    rules[231] = new Rule(-39, new int[]{28});
    rules[232] = new Rule(-39, new int[]{29});
    rules[233] = new Rule(-39, new int[]{30});
    rules[234] = new Rule(-40, new int[]{4});
    rules[235] = new Rule(-40, new int[]{5});
    rules[236] = new Rule(-40, new int[]{7});
    rules[237] = new Rule(-40, new int[]{8});
    rules[238] = new Rule(-40, new int[]{9});
    rules[239] = new Rule(-40, new int[]{11});
    rules[240] = new Rule(-40, new int[]{12});
    rules[241] = new Rule(-40, new int[]{13});
    rules[242] = new Rule(-40, new int[]{14});
    rules[243] = new Rule(-40, new int[]{15});
    rules[244] = new Rule(-40, new int[]{16});
    rules[245] = new Rule(-40, new int[]{17});
    rules[246] = new Rule(-40, new int[]{18});
    rules[247] = new Rule(-40, new int[]{19});
    rules[248] = new Rule(-40, new int[]{20});
    rules[249] = new Rule(-40, new int[]{21});
    rules[250] = new Rule(-40, new int[]{22});
    rules[251] = new Rule(-40, new int[]{23});
    rules[252] = new Rule(-40, new int[]{24});
    rules[253] = new Rule(-40, new int[]{25});
    rules[254] = new Rule(-40, new int[]{27});
    rules[255] = new Rule(-40, new int[]{28});
    rules[256] = new Rule(-40, new int[]{29});
    rules[257] = new Rule(-40, new int[]{30});
    rules[258] = new Rule(-41, new int[]{});
    rules[259] = new Rule(-41, new int[]{-41,-2});
    rules[260] = new Rule(-41, new int[]{-41,-12});
    rules[261] = new Rule(-42, new int[]{});
    rules[262] = new Rule(-42, new int[]{-42,-35});
    rules[263] = new Rule(-42, new int[]{-42,-13});
    rules[264] = new Rule(-43, new int[]{});
    rules[265] = new Rule(-43, new int[]{-43,-36});
    rules[266] = new Rule(-43, new int[]{-43,-14});
    rules[267] = new Rule(-44, new int[]{-13,29});
    rules[268] = new Rule(-44, new int[]{26,29});
    rules[269] = new Rule(-45, new int[]{-4});
    rules[270] = new Rule(-45, new int[]{30});
    rules[271] = new Rule(-46, new int[]{});
    rules[272] = new Rule(-46, new int[]{-46,-16});
    rules[273] = new Rule(-47, new int[]{});
    rules[274] = new Rule(-47, new int[]{-47,-37});
    rules[275] = new Rule(-48, new int[]{});
    rules[276] = new Rule(-48, new int[]{12});
    rules[277] = new Rule(-49, new int[]{});
    rules[278] = new Rule(-49, new int[]{-49,-20});
    rules[279] = new Rule(-50, new int[]{});
    rules[280] = new Rule(-50, new int[]{-50,-21});
    rules[281] = new Rule(-51, new int[]{});
    rules[282] = new Rule(-51, new int[]{-51,-12});
    rules[283] = new Rule(-52, new int[]{});
    rules[284] = new Rule(-52, new int[]{-52,-32});
    rules[285] = new Rule(-53, new int[]{});
    rules[286] = new Rule(-53, new int[]{-53,-38});
    rules[287] = new Rule(-54, new int[]{});
    rules[288] = new Rule(-54, new int[]{-54,-39});
    rules[289] = new Rule(-55, new int[]{});
    rules[290] = new Rule(-55, new int[]{-55,-34});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    CurrentSemanticValue = new ValueType();
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // _ANY -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 3: // _ANY -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 4: // _ANY -> tkCodeOpen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 5: // _ANY -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 6: // _ANY -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 7: // _ANY -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 8: // _ANY -> tkInitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 9: // _ANY -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 10: // _ANY -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 11: // _ANY -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 12: // _ANY -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 13: // _ANY -> _var
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 14: // _ANY -> _const
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 15: // _ANY -> _label
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 16: // _ANY -> _virtual
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 17: // _ANY -> _override
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 18: // _ANY -> _reintroduce
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 19: // _ANY -> _extensionmethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 20: // _ANY -> _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 21: // _ANY -> _end
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 22: // _ANY -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 23: // _ANY -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 24: // _ANY -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 25: // _ANY -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 26: // tkClassOpen -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 27: // tkClassOpen -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 28: // tkClassOpen -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 29: // tkDefs -> _var
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 30: // tkDefs -> _const
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 31: // tkDefs -> _label
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 32: // _Defs_set -> FieldOrClass
{
        CurrentLocationSpan = Scanner.yylloc;
		CurrentSemanticValue.type_SourceEntityUniformSet = new SourceEntityUniformSet("", false, CurrentLocationSpan);
		CurrentSemanticValue.type_SourceEntityUniformSet.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_SourceEntityUniformSet.Value.Add("1");

	}
        break;
      case 33: // _Defs_set -> _Defs_set, FieldOrClass
{
        CurrentLocationSpan = LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.type_SourceEntityUniformSet = ValueStack[ValueStack.Depth-2].type_SourceEntityUniformSet;
        CurrentSemanticValue.type_SourceEntityUniformSet.Location = CurrentLocationSpan;
		CurrentSemanticValue.type_SourceEntityUniformSet.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
        CurrentSemanticValue.type_SourceEntityUniformSet.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
    }
        break;
      case 34: // _ClassMethodBody_set -> /* empty */
{
        CurrentLocationSpan = Scanner.yylloc;
		CurrentSemanticValue.type_SourceEntityUniformSet = new SourceEntityUniformSet("", true, CurrentLocationSpan);

	}
        break;
      case 35: // _ClassMethodBody_set -> _ClassMethodBody_set, Defs
{
        CurrentLocationSpan = LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.type_SourceEntityUniformSet = ValueStack[ValueStack.Depth-2].type_SourceEntityUniformSet;
        CurrentSemanticValue.type_SourceEntityUniformSet.Location = CurrentLocationSpan;
		CurrentSemanticValue.type_SourceEntityUniformSet.AddItem(ValueStack[ValueStack.Depth-1].type_Defs);
        CurrentSemanticValue.type_SourceEntityUniformSet.AddValue(ValueStack[ValueStack.Depth-1].type_Defs);
    }
        break;
      case 36: // _MethodBody_set -> /* empty */
{
        CurrentLocationSpan = Scanner.yylloc;
		CurrentSemanticValue.type_SourceEntityUniformSet = new SourceEntityUniformSet("", true, CurrentLocationSpan);

	}
        break;
      case 37: // _MethodBody_set -> _MethodBody_set, MethodLocals
{
        CurrentLocationSpan = LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.type_SourceEntityUniformSet = ValueStack[ValueStack.Depth-2].type_SourceEntityUniformSet;
        CurrentSemanticValue.type_SourceEntityUniformSet.Location = CurrentLocationSpan;
		CurrentSemanticValue.type_SourceEntityUniformSet.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
        CurrentSemanticValue.type_SourceEntityUniformSet.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
    }
        break;
      case 38: // tkDirectiveHeader -> _virtual
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 39: // tkDirectiveHeader -> _override
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 40: // tkDirectiveHeader -> _reintroduce
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 41: // tkDirectiveHeader -> _extensionmethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 42: // tkDirectiveHeader -> _where
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 43: // _Class_set -> /* empty */
{
        CurrentLocationSpan = Scanner.yylloc;
		CurrentSemanticValue.type_SourceEntityUniformSet = new SourceEntityUniformSet("", true, CurrentLocationSpan);

	}
        break;
      case 44: // _Class_set -> _Class_set, ClassNode
{
        CurrentLocationSpan = LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.type_SourceEntityUniformSet = ValueStack[ValueStack.Depth-2].type_SourceEntityUniformSet;
        CurrentSemanticValue.type_SourceEntityUniformSet.Location = CurrentLocationSpan;
		CurrentSemanticValue.type_SourceEntityUniformSet.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
        CurrentSemanticValue.type_SourceEntityUniformSet.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
    }
        break;
      case 45: // tkInterf -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 46: // _Program_set -> /* empty */
{
        CurrentLocationSpan = Scanner.yylloc;
		CurrentSemanticValue.type_SourceEntityUniformSet = new SourceEntityUniformSet("", true, CurrentLocationSpan);

	}
        break;
      case 47: // _Program_set -> _Program_set, ProgramNode
{
        CurrentLocationSpan = LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]);
		CurrentSemanticValue.type_SourceEntityUniformSet = ValueStack[ValueStack.Depth-2].type_SourceEntityUniformSet;
        CurrentSemanticValue.type_SourceEntityUniformSet.Location = CurrentLocationSpan;
		CurrentSemanticValue.type_SourceEntityUniformSet.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
        CurrentSemanticValue.type_SourceEntityUniformSet.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
    }
        break;
      case 48: // Params -> _Ropen, _, _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-3].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 49: // Params -> _where, _Tk2_list, _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-3].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);

	}
        break;
      case 50: // Block -> tkCodeOpen, _11, _end
{
		CurrentSemanticValue.type_Block = new Block(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Block.Location;
		CurrentSemanticValue.type_Block.Value.Add("Block");

	}
        break;
      case 51: // Attribute -> _Sopen, _12, _Sclose
{
		CurrentSemanticValue.type_Attribute = new Attribute(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Attribute.Location;
		CurrentSemanticValue.type_Attribute.AddValue(ValueStack[ValueStack.Depth-3].type_Token);
		CurrentSemanticValue.type_Attribute.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_Attribute.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 52: // Tk -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 53: // Tk -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 54: // Tk -> Params
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 55: // Tk -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 56: // Tk2 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 57: // Tk2 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 58: // Tk2 -> Params
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 59: // Tk2 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 60: // Tk2 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 61: // Tk2 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 62: // Tk2 -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 63: // Tk2 -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 64: // Tk2 -> _label
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 65: // Program -> _Program_set, _13, __ANY7_list
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-3].type_SourceEntityUniformSet);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		root = CurrentSemanticValue.type_PAS_TreeNode;
	}
        break;
      case 66: // ProgramNode -> Defs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Defs);
errBegin = CurrentLocationSpan;
	}
        break;
      case 67: // ProgramNode -> Field
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Field);
errBegin = CurrentLocationSpan;
	}
        break;
      case 68: // ProgramNode -> Method
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Method);
errBegin = CurrentLocationSpan;
	}
        break;
      case 69: // ProgramNode -> InitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_InitFinal);
errBegin = CurrentLocationSpan;
	}
        break;
      case 70: // ProgramNode -> InterfacePart
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
errBegin = CurrentLocationSpan;
	}
        break;
      case 71: // ProgramNode -> Attribute
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Attribute);
errBegin = CurrentLocationSpan;
	}
        break;
      case 72: // ProgramNode -> error
{
        CurrentLocationSpan = new LexLocation(errBegin.EndLine, errBegin.EndColumn, LocationStack[LocationStack.Depth-1].StartLine, LocationStack[LocationStack.Depth-1].StartColumn);
        PAS_TreeNode err = new PAS_TreeNode((Scanner as Scanner).errorMsg, CurrentLocationSpan);
        Errors.Add(err);
        errBegin = CurrentLocationSpan;
    }
        break;
      case 73: // ClassNode -> tkClassVisModifier
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    errBegin = CurrentLocationSpan;
}
        break;
      case 74: // ClassNode -> __class_opt, Field
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Field);
errBegin = CurrentLocationSpan;
	}
        break;
      case 75: // ClassNode -> ClassMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_ClassMethod);
errBegin = CurrentLocationSpan;
	}
        break;
      case 76: // ClassNode -> Attribute
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Attribute);
errBegin = CurrentLocationSpan;
	}
        break;
      case 77: // ClassNode -> error
{
        CurrentLocationSpan = new LexLocation(errBegin.EndLine, errBegin.EndColumn, LocationStack[LocationStack.Depth-1].StartLine, LocationStack[LocationStack.Depth-1].StartColumn);
        PAS_TreeNode err = new PAS_TreeNode((Scanner as Scanner).errorMsg, CurrentLocationSpan);
        Errors.Add(err);
        errBegin = CurrentLocationSpan;
    }
        break;
      case 78: // InterfacePart -> tkInterf, _InterfNode_list, tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);

	}
        break;
      case 79: // InterfNode -> Defs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Defs);
errBegin = CurrentLocationSpan;
	}
        break;
      case 80: // InterfNode -> Field
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Field);
errBegin = CurrentLocationSpan;
	}
        break;
      case 81: // InterfNode -> MethodHeader
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_MethodHeader);
errBegin = CurrentLocationSpan;
	}
        break;
      case 82: // InterfNode -> Attribute
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Attribute);
errBegin = CurrentLocationSpan;
	}
        break;
      case 83: // InterfNode -> error
{
        CurrentLocationSpan = new LexLocation(errBegin.EndLine, errBegin.EndColumn, LocationStack[LocationStack.Depth-1].StartLine, LocationStack[LocationStack.Depth-1].StartColumn);
        PAS_TreeNode err = new PAS_TreeNode((Scanner as Scanner).errorMsg, CurrentLocationSpan);
        Errors.Add(err);
        errBegin = CurrentLocationSpan;
    }
        break;
      case 84: // Field -> Tk, _Tk2_list, _Scolon
{
		CurrentSemanticValue.type_Field = new Field(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Field.Location;
		CurrentSemanticValue.type_Field.AddValue(ValueStack[ValueStack.Depth-3].type_PAS_TreeNode);
		CurrentSemanticValue.type_Field.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);

	}
        break;
      case 85: // Field -> _record, _Field_list, _end, _Tk2_list, _Scolon
{
		CurrentSemanticValue.type_Field = new Field(new List<string>(), LocationStack[LocationStack.Depth-5].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Field.Location;
		CurrentSemanticValue.type_Field.AddValue(ValueStack[ValueStack.Depth-5].type_Token);
		CurrentSemanticValue.type_Field.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_Field.AddSubItems(ValueStack[ValueStack.Depth-4].type_PAS_TreeNode);

	}
        break;
      case 86: // Class -> Tk, _Tk2_list, tkClassOpen, _Params_list, _Class_set, _end, _Scolon
{
		CurrentSemanticValue.type_Class = new Class(new List<string>(), LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Class.Location;
		CurrentSemanticValue.type_Class.AddValue(ValueStack[ValueStack.Depth-7].type_PAS_TreeNode);
		CurrentSemanticValue.type_Class.AddValue(ValueStack[ValueStack.Depth-6].type_PAS_TreeNode);
		CurrentSemanticValue.type_Class.AddValue(ValueStack[ValueStack.Depth-5].type_PAS_TreeNode);
		CurrentSemanticValue.type_Class.AddValue(ValueStack[ValueStack.Depth-4].type_PAS_TreeNode);
		CurrentSemanticValue.type_Class.AddSubItems(ValueStack[ValueStack.Depth-3].type_SourceEntityUniformSet);

	}
        break;
      case 87: // Method -> MethodHeader, MethodBody
{
		CurrentSemanticValue.type_Method = new Method(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Method.Location;
		CurrentSemanticValue.type_Method.AddValue(ValueStack[ValueStack.Depth-2].type_MethodHeader);
		CurrentSemanticValue.type_Method.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 88: // MethodHeader -> __class_opt, tkMethod, _Tk2_list, _Scolon, 
               //                 _DirectiveHeader_list
{
		CurrentSemanticValue.type_MethodHeader = new MethodHeader(new List<string>(), LocationStack[LocationStack.Depth-5].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_MethodHeader.Location;
		CurrentSemanticValue.type_MethodHeader.AddValue(ValueStack[ValueStack.Depth-5].type_PAS_TreeNode);
		CurrentSemanticValue.type_MethodHeader.AddValue(ValueStack[ValueStack.Depth-4].type_Token);
		CurrentSemanticValue.type_MethodHeader.AddValue(ValueStack[ValueStack.Depth-3].type_PAS_TreeNode);
		CurrentSemanticValue.type_MethodHeader.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 89: // MethodBody -> Directive
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 90: // MethodBody -> _MethodBody_set, Block, _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-3].type_SourceEntityUniformSet);

	}
        break;
      case 91: // MethodLocals -> Defs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Defs);

	}
        break;
      case 92: // MethodLocals -> Method
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Method);

	}
        break;
      case 93: // ClassMethod -> MethodHeader, ClassMethodBody
{
		CurrentSemanticValue.type_ClassMethod = new ClassMethod(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_ClassMethod.Location;
		CurrentSemanticValue.type_ClassMethod.AddValue(ValueStack[ValueStack.Depth-2].type_MethodHeader);
		CurrentSemanticValue.type_ClassMethod.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 94: // ClassMethodBody -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 95: // ClassMethodBody -> Directive
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 96: // ClassMethodBody -> _ClassMethodBody_set, Block, _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-3].type_SourceEntityUniformSet);

	}
        break;
      case 97: // Defs -> _14, _Defs_set
{
		CurrentSemanticValue.type_Defs = new Defs(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Defs.Location;
		CurrentSemanticValue.type_Defs.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_Defs.AddSubItems(ValueStack[ValueStack.Depth-1].type_SourceEntityUniformSet);

	}
        break;
      case 98: // FieldOrClass -> Field
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Field);

	}
        break;
      case 99: // FieldOrClass -> Class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Class);

	}
        break;
      case 100: // Directive -> tkDirective, __ANY8_list, _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-3].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);

	}
        break;
      case 101: // DirectiveHeader -> tkDirectiveHeader, __ANY9_list, _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-3].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);

	}
        break;
      case 102: // InitFinal -> tkInitFinal, _CodeToken_list
{
		CurrentSemanticValue.type_InitFinal = new InitFinal(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_InitFinal.Location;
		CurrentSemanticValue.type_InitFinal.AddValue(ValueStack[ValueStack.Depth-2].type_Token);

	}
        break;
      case 103: // CodeToken -> _ANY10
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 104: // CodeToken -> Block
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 105: // _ANY5 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 106: // _ANY5 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 107: // _ANY5 -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 108: // _ANY5 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 109: // _ANY5 -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 110: // _ANY5 -> tkInitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 111: // _ANY5 -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 112: // _ANY5 -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 113: // _ANY5 -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 114: // _ANY5 -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 115: // _ANY5 -> _var
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 116: // _ANY5 -> _const
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 117: // _ANY5 -> _label
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 118: // _ANY5 -> _virtual
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 119: // _ANY5 -> _override
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 120: // _ANY5 -> _reintroduce
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 121: // _ANY5 -> _extensionmethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 122: // _ANY5 -> _where
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 123: // _ANY5 -> _Ropen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 124: // _ANY5 -> _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 125: // _ANY5 -> _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 126: // _ANY5 -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 127: // _ANY5 -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 128: // _ANY5 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 129: // _ANY5 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 130: // _ANY6 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 131: // _ANY6 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 132: // _ANY6 -> tkCodeOpen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 133: // _ANY6 -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 134: // _ANY6 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 135: // _ANY6 -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 136: // _ANY6 -> tkInitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 137: // _ANY6 -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 138: // _ANY6 -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 139: // _ANY6 -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 140: // _ANY6 -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 141: // _ANY6 -> _var
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 142: // _ANY6 -> _const
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 143: // _ANY6 -> _label
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 144: // _ANY6 -> _virtual
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 145: // _ANY6 -> _override
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 146: // _ANY6 -> _reintroduce
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 147: // _ANY6 -> _extensionmethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 148: // _ANY6 -> _where
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 149: // _ANY6 -> _Ropen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 150: // _ANY6 -> _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 151: // _ANY6 -> _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 152: // _ANY6 -> _end
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 153: // _ANY6 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 154: // _ANY6 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 155: // _ANY7 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 156: // _ANY7 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 157: // _ANY7 -> tkCodeOpen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 158: // _ANY7 -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 159: // _ANY7 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 160: // _ANY7 -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 161: // _ANY7 -> tkInitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 162: // _ANY7 -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 163: // _ANY7 -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 164: // _ANY7 -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 165: // _ANY7 -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 166: // _ANY7 -> _var
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 167: // _ANY7 -> _const
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 168: // _ANY7 -> _label
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 169: // _ANY7 -> _virtual
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 170: // _ANY7 -> _override
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 171: // _ANY7 -> _reintroduce
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 172: // _ANY7 -> _extensionmethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 173: // _ANY7 -> _where
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 174: // _ANY7 -> _Ropen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 175: // _ANY7 -> _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 176: // _ANY7 -> _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 177: // _ANY7 -> _end
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 178: // _ANY7 -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 179: // _ANY7 -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 180: // _ANY7 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 181: // _ANY7 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 182: // _ANY8 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 183: // _ANY8 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 184: // _ANY8 -> tkCodeOpen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 185: // _ANY8 -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 186: // _ANY8 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 187: // _ANY8 -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 188: // _ANY8 -> tkInitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 189: // _ANY8 -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 190: // _ANY8 -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 191: // _ANY8 -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 192: // _ANY8 -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 193: // _ANY8 -> _var
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 194: // _ANY8 -> _const
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 195: // _ANY8 -> _label
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 196: // _ANY8 -> _virtual
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 197: // _ANY8 -> _override
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 198: // _ANY8 -> _reintroduce
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 199: // _ANY8 -> _extensionmethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 200: // _ANY8 -> _where
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 201: // _ANY8 -> _Ropen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 202: // _ANY8 -> _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 203: // _ANY8 -> _end
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 204: // _ANY8 -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 205: // _ANY8 -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 206: // _ANY8 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 207: // _ANY8 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 208: // _ANY9 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 209: // _ANY9 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 210: // _ANY9 -> tkCodeOpen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 211: // _ANY9 -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 212: // _ANY9 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 213: // _ANY9 -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 214: // _ANY9 -> tkInitFinal
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 215: // _ANY9 -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 216: // _ANY9 -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 217: // _ANY9 -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 218: // _ANY9 -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 219: // _ANY9 -> _var
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 220: // _ANY9 -> _const
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 221: // _ANY9 -> _label
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 222: // _ANY9 -> _virtual
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 223: // _ANY9 -> _override
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 224: // _ANY9 -> _reintroduce
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 225: // _ANY9 -> _extensionmethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 226: // _ANY9 -> _where
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 227: // _ANY9 -> _Ropen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 228: // _ANY9 -> _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 229: // _ANY9 -> _end
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 230: // _ANY9 -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 231: // _ANY9 -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 232: // _ANY9 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 233: // _ANY9 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 234: // _ANY10 -> LetterDigits
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 235: // _ANY10 -> Sign
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 236: // _ANY10 -> tkClassVisModifier
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 237: // _ANY10 -> tkMethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 238: // _ANY10 -> tkDirective
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 239: // _ANY10 -> tkImpl
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 240: // _ANY10 -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 241: // _ANY10 -> _interface
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 242: // _ANY10 -> _record
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 243: // _ANY10 -> _var
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 244: // _ANY10 -> _const
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 245: // _ANY10 -> _label
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 246: // _ANY10 -> _virtual
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 247: // _ANY10 -> _override
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 248: // _ANY10 -> _reintroduce
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 249: // _ANY10 -> _extensionmethod
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 250: // _ANY10 -> _where
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 251: // _ANY10 -> _Ropen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 252: // _ANY10 -> _Rclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 253: // _ANY10 -> _Scolon
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 254: // _ANY10 -> _Sopen
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 255: // _ANY10 -> _Sclose
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 256: // _ANY10 -> _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 257: // _ANY10 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 258: // _ -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 259: // _ -> _, _ANY
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 260: // _ -> _, Params
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 261: // _11 -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 262: // _11 -> _11, _ANY5
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 263: // _11 -> _11, Block
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 264: // _12 -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 265: // _12 -> _12, _ANY6
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 266: // _12 -> _12, Attribute
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Attribute);

	}
        break;
      case 267: // _13 -> Block, _Dot
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-2].type_Block);

	}
        break;
      case 268: // _13 -> _end, _Dot
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 269: // _14 -> tkDefs
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 270: // _14 -> _type
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 271: // _Tk2_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 272: // _Tk2_list -> _Tk2_list, Tk2
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 273: // __ANY7_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 274: // __ANY7_list -> __ANY7_list, _ANY7
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 275: // __class_opt -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 276: // __class_opt -> _class
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 277: // _InterfNode_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 278: // _InterfNode_list -> _InterfNode_list, InterfNode
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 279: // _Field_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 280: // _Field_list -> _Field_list, Field
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Field);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Field);

	}
        break;
      case 281: // _Params_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 282: // _Params_list -> _Params_list, Params
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 283: // _DirectiveHeader_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 284: // _DirectiveHeader_list -> _DirectiveHeader_list, DirectiveHeader
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 285: // __ANY8_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 286: // __ANY8_list -> __ANY8_list, _ANY8
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 287: // __ANY9_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 288: // __ANY9_list -> __ANY9_list, _ANY9
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
      case 289: // _CodeToken_list -> /* empty */
{ CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 290: // _CodeToken_list -> _CodeToken_list, CodeToken
{
		CurrentSemanticValue.type_PAS_TreeNode = new PAS_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_PAS_TreeNode.Location;
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_PAS_TreeNode);
		CurrentSemanticValue.type_PAS_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_PAS_TreeNode);

	}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

public LexLocation errBegin = new LexLocation(1,0,1,0);
public List<SourceEntity> Errors = new List<SourceEntity>();
}
}
