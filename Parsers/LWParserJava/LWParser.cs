// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  BLUEGENE
// DateTime: 23.11.2015 20:39:50
// UserName: MikhailoMMX
// Input file <LWParser.y - 23.11.2015 20:39:49>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AspectCore;

namespace LWParser
{
public enum Tokens {error=2,EOF=3,ID=4,Sign=5,_Copen=6,
    _Cclose=7,_class=8,_Scolon=9};

public partial class ValueType
{ 
  public SourceEntity type_SourceEntity;
  public JAVA_TreeNode type_JAVA_TreeNode;
  public Token type_Token;
  public Code type_Code;
  public Imports type_Imports;
  public Class type_Class;
  public Field type_Field;
  public Method type_Method;
  public SourceEntityUniformSet type_SourceEntityUniformSet;

}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[28];
  private static State[] states = new State[35];
  private static string[] nonTerms = new string[] {
      "Program", "Code", "TKList", "Imports", "Class", "ClassEntity", "Field", 
      "Method", "_ANY", "_ANY5", "_", "__ANY5_list", "_Imports_list", "_Class_listNE", 
      "_ClassEntity_list", "$accept", };

  static Parser() {
    states[0] = new State(-22,new int[]{-1,1,-13,3}, new int[]{1,0});
    states[1] = new State(new int[]{3,2},new int[]{}, new int[]{1,1});
    states[2] = new State(-1,new int[]{}, new int[]{1,2});
    states[3] = new State(-20,new int[]{-14,4,-4,31,-5,32,-3,33,-12,26}, new int[]{4,1});
    states[4] = new State(new int[]{3,-4,4,-20,5,-20,8,-20},new int[]{-5,5,-3,6,-12,26}, new int[]{4,2});
    states[5] = new State(-25,new int[]{}, new int[]{25,2});
    states[6] = new State(new int[]{8,7},new int[]{}, new int[]{6,1});
    states[7] = new State(new int[]{4,8},new int[]{}, new int[]{6,2});
    states[8] = new State(new int[]{6,9},new int[]{}, new int[]{6,3});
    states[9] = new State(-26,new int[]{-15,10}, new int[]{6,4});
    states[10] = new State(new int[]{7,11,4,-20,5,-20,9,-20,6,-20},new int[]{-6,12,-7,13,-3,14,-12,26,-8,30}, new int[]{6,5});
    states[11] = new State(-6,new int[]{}, new int[]{6,6});
    states[12] = new State(-27,new int[]{}, new int[]{27,2});
    states[13] = new State(-7,new int[]{}, new int[]{7,1});
    states[14] = new State(new int[]{9,15,6,17},new int[]{-2,16}, new int[]{9,1,10,1});
    states[15] = new State(-9,new int[]{}, new int[]{9,2});
    states[16] = new State(-10,new int[]{}, new int[]{10,2});
    states[17] = new State(-17,new int[]{-11,18}, new int[]{2,1});
    states[18] = new State(new int[]{7,19,4,22,5,23,8,24,9,25,6,17},new int[]{-9,20,-2,21}, new int[]{2,2});
    states[19] = new State(-2,new int[]{}, new int[]{2,3});
    states[20] = new State(-18,new int[]{}, new int[]{18,2});
    states[21] = new State(-19,new int[]{}, new int[]{19,2});
    states[22] = new State(-11,new int[]{}, new int[]{11,1});
    states[23] = new State(-12,new int[]{}, new int[]{12,1});
    states[24] = new State(-13,new int[]{}, new int[]{13,1});
    states[25] = new State(-14,new int[]{}, new int[]{14,1});
    states[26] = new State(new int[]{4,28,5,29,8,-3,9,-3,6,-3},new int[]{-10,27}, new int[]{3,1});
    states[27] = new State(-21,new int[]{}, new int[]{21,2});
    states[28] = new State(-15,new int[]{}, new int[]{15,1});
    states[29] = new State(-16,new int[]{}, new int[]{16,1});
    states[30] = new State(-8,new int[]{}, new int[]{8,1});
    states[31] = new State(-23,new int[]{}, new int[]{23,2});
    states[32] = new State(-24,new int[]{}, new int[]{24,1});
    states[33] = new State(new int[]{8,7,9,34},new int[]{}, new int[]{6,1,5,1});
    states[34] = new State(-5,new int[]{}, new int[]{5,2});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-16, new int[]{-1,3});
    rules[2] = new Rule(-2, new int[]{6,-11,7});
    rules[3] = new Rule(-3, new int[]{-12});
    rules[4] = new Rule(-1, new int[]{-13,-14});
    rules[5] = new Rule(-4, new int[]{-3,9});
    rules[6] = new Rule(-5, new int[]{-3,8,4,6,-15,7});
    rules[7] = new Rule(-6, new int[]{-7});
    rules[8] = new Rule(-6, new int[]{-8});
    rules[9] = new Rule(-7, new int[]{-3,9});
    rules[10] = new Rule(-8, new int[]{-3,-2});
    rules[11] = new Rule(-9, new int[]{4});
    rules[12] = new Rule(-9, new int[]{5});
    rules[13] = new Rule(-9, new int[]{8});
    rules[14] = new Rule(-9, new int[]{9});
    rules[15] = new Rule(-10, new int[]{4});
    rules[16] = new Rule(-10, new int[]{5});
    rules[17] = new Rule(-11, new int[]{});
    rules[18] = new Rule(-11, new int[]{-11,-9});
    rules[19] = new Rule(-11, new int[]{-11,-2});
    rules[20] = new Rule(-12, new int[]{});
    rules[21] = new Rule(-12, new int[]{-12,-10});
    rules[22] = new Rule(-13, new int[]{});
    rules[23] = new Rule(-13, new int[]{-13,-4});
    rules[24] = new Rule(-14, new int[]{-5});
    rules[25] = new Rule(-14, new int[]{-14,-5});
    rules[26] = new Rule(-15, new int[]{});
    rules[27] = new Rule(-15, new int[]{-15,-6});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    CurrentSemanticValue = new ValueType();
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Code -> _Copen, _, _Cclose
{
		CurrentSemanticValue.type_Code = new Code(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Code.Location;
		CurrentSemanticValue.type_Code.Value.Add("Code");

	}
        break;
      case 3: // TKList -> __ANY5_list
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_JAVA_TreeNode);

	}
        break;
      case 4: // Program -> _Imports_list, _Class_listNE
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);
		CurrentSemanticValue.type_JAVA_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_JAVA_TreeNode);
		root = CurrentSemanticValue.type_JAVA_TreeNode;
	}
        break;
      case 5: // Imports -> TKList, _Scolon
{
		CurrentSemanticValue.type_Imports = new Imports(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Imports.Location;
		CurrentSemanticValue.type_Imports.AddValue(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);

	}
        break;
      case 6: // Class -> TKList, _class, ID, _Copen, _ClassEntity_list, _Cclose
{
		CurrentSemanticValue.type_Class = new Class(new List<string>(), LocationStack[LocationStack.Depth-6].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Class.Location;
		CurrentSemanticValue.type_Class.AddValue(ValueStack[ValueStack.Depth-6].type_JAVA_TreeNode);
		CurrentSemanticValue.type_Class.AddValue(ValueStack[ValueStack.Depth-5].type_Token);
		CurrentSemanticValue.type_Class.AddValue(ValueStack[ValueStack.Depth-4].type_Token);
		CurrentSemanticValue.type_Class.AddSubItems(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);

	}
        break;
      case 7: // ClassEntity -> Field
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Field);

	}
        break;
      case 8: // ClassEntity -> Method
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Method);

	}
        break;
      case 9: // Field -> TKList, _Scolon
{
		CurrentSemanticValue.type_Field = new Field(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Field.Location;
		CurrentSemanticValue.type_Field.AddValue(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);

	}
        break;
      case 10: // Method -> TKList, Code
{
		CurrentSemanticValue.type_Method = new Method(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Method.Location;
		CurrentSemanticValue.type_Method.AddValue(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);
		CurrentSemanticValue.type_Method.AddItem(ValueStack[ValueStack.Depth-1].type_Code);

	}
        break;
      case 11: // _ANY -> ID
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_JAVA_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 12: // _ANY -> Sign
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_JAVA_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 13: // _ANY -> _class
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_JAVA_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 14: // _ANY -> _Scolon
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_JAVA_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 15: // _ANY5 -> ID
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_JAVA_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 16: // _ANY5 -> Sign
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_JAVA_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 17: // _ -> /* empty */
{ CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 18: // _ -> _, _ANY
{ CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 19: // _ -> _, Code
{ CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 20: // __ANY5_list -> /* empty */
{ CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 21: // __ANY5_list -> __ANY5_list, _ANY5
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_JAVA_TreeNode);
		CurrentSemanticValue.type_JAVA_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);
		CurrentSemanticValue.type_JAVA_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_JAVA_TreeNode);

	}
        break;
      case 22: // _Imports_list -> /* empty */
{ CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 23: // _Imports_list -> _Imports_list, Imports
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Imports);
		CurrentSemanticValue.type_JAVA_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);
		CurrentSemanticValue.type_JAVA_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Imports);

	}
        break;
      case 24: // _Class_listNE -> Class
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Class);
		CurrentSemanticValue.type_JAVA_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Class);

	}
        break;
      case 25: // _Class_listNE -> _Class_listNE, Class
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Class);
		CurrentSemanticValue.type_JAVA_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);
		CurrentSemanticValue.type_JAVA_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Class);

	}
        break;
      case 26: // _ClassEntity_list -> /* empty */
{ CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 27: // _ClassEntity_list -> _ClassEntity_list, ClassEntity
{
		CurrentSemanticValue.type_JAVA_TreeNode = new JAVA_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_JAVA_TreeNode.Location;
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);
		CurrentSemanticValue.type_JAVA_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_JAVA_TreeNode);
		CurrentSemanticValue.type_JAVA_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_JAVA_TreeNode);
		CurrentSemanticValue.type_JAVA_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_JAVA_TreeNode);

	}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

public LexLocation errBegin = new LexLocation(1,0,1,0);
public List<SourceEntity> Errors = new List<SourceEntity>();
}
}
