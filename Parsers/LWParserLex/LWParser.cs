// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  BLUEGENE
// DateTime: 25.08.2015 17:34:36
// UserName: MikhailoMMX
// Input file <LWParser.y - 25.08.2015 17:34:35>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AspectCore;

namespace LWLex
{
public enum Tokens {error=2,EOF=3,ID=4,NL=5,Sign=6,
    RegexItem=7,tkLT=8,tkGT=9,tkPC=10,tkPC2=11,tkBOpen=12,
    tkBClose=13,tkPCX=14,tkPCS=15};

public partial class ValueType
{ 
  public SourceEntity type_SourceEntity;
  public LEX_TreeNode type_LEX_TreeNode;
  public Token type_Token;
  public Program type_Program;
  public Regex1 type_Regex1;
  public Regex2 type_Regex2;
  public IdList type_IdList;
  public Section1 type_Section1;
  public RegexDecl type_RegexDecl;
  public StateDecl type_StateDecl;
  public Section2 type_Section2;
  public RuleOrGroup type_RuleOrGroup;
  public LexRule type_LexRule;
  public Group type_Group;
  public SourceEntityUniformSet type_SourceEntityUniformSet;

}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[130];
  private static State[] states = new State[151];
  private static string[] nonTerms = new string[] {
      "Program", "_8", "_7", "_", "_ANY6", "_ANY5", "_ANY4", "_ANY3", "_ANY", 
      "DirectCode", "ContextCode", "RegexHead", "RegexTail", "Regex1", "Regex2", 
      "IdList", "Section1", "Section1Item", "RegexDecl", "StateDecl", "PercentDecl", 
      "Section2", "Section2Item", "States", "RuleOrGroup", "LexRule", "Group", 
      "_9", "_10", "_11", "_12", "_13", "_Sign_opt", "__ANY_list", "__ANY3_list", 
      "_RegexTail_list", "_Section1Item_list", "__ANY5_list", "_Section2Item_list", 
      "_NL_list", "_States_opt", "__ANY6_list", "$accept", };

  static Parser() {
    states[0] = new State(-118,new int[]{-1,1,-17,3,-37,119}, new int[]{1,0});
    states[1] = new State(new int[]{3,2},new int[]{}, new int[]{1,1});
    states[2] = new State(-1,new int[]{}, new int[]{1,2});
    states[3] = new State(new int[]{11,4},new int[]{}, new int[]{62,1});
    states[4] = new State(-122,new int[]{-22,5,-39,21}, new int[]{62,2});
    states[5] = new State(new int[]{11,6},new int[]{}, new int[]{62,3});
    states[6] = new State(-112,new int[]{-34,7}, new int[]{62,4});
    states[7] = new State(new int[]{4,9,5,10,6,11,7,12,8,13,9,14,10,15,11,16,12,17,13,18,14,19,15,20,3,-62},new int[]{-9,8}, new int[]{62,5});
    states[8] = new State(-113,new int[]{}, new int[]{113,2});
    states[9] = new State(-50,new int[]{}, new int[]{50,1});
    states[10] = new State(-51,new int[]{}, new int[]{51,1});
    states[11] = new State(-52,new int[]{}, new int[]{52,1});
    states[12] = new State(-53,new int[]{}, new int[]{53,1});
    states[13] = new State(-54,new int[]{}, new int[]{54,1});
    states[14] = new State(-55,new int[]{}, new int[]{55,1});
    states[15] = new State(-56,new int[]{}, new int[]{56,1});
    states[16] = new State(-57,new int[]{}, new int[]{57,1});
    states[17] = new State(-58,new int[]{}, new int[]{58,1});
    states[18] = new State(-59,new int[]{}, new int[]{59,1});
    states[19] = new State(-60,new int[]{}, new int[]{60,1});
    states[20] = new State(-61,new int[]{}, new int[]{61,1});
    states[21] = new State(new int[]{8,87,10,99,5,116,2,117,11,-88,12,-126,7,-126,6,-126,9,-126},new int[]{-23,22,-25,23,-41,24,-24,86,-10,98}, new int[]{88,1});
    states[22] = new State(-123,new int[]{}, new int[]{123,2});
    states[23] = new State(-89,new int[]{}, new int[]{89,1});
    states[24] = new State(-124,new int[]{-40,25}, new int[]{94,1});
    states[25] = new State(new int[]{5,27,12,29,7,74,6,75,10,76,9,77},new int[]{-29,26,-27,28,-26,85,-30,37,-15,83,-12,70}, new int[]{94,2});
    states[26] = new State(-94,new int[]{}, new int[]{94,3});
    states[27] = new State(-125,new int[]{}, new int[]{125,2});
    states[28] = new State(-99,new int[]{}, new int[]{99,1});
    states[29] = new State(-105,new int[]{-32,30}, new int[]{96,1});
    states[30] = new State(new int[]{13,31,5,34,2,35,12,29,7,74,6,75,10,76,9,77},new int[]{-27,32,-26,33,-30,37,-15,83,-12,70}, new int[]{96,2});
    states[31] = new State(-96,new int[]{}, new int[]{96,3});
    states[32] = new State(-106,new int[]{}, new int[]{106,2});
    states[33] = new State(-107,new int[]{}, new int[]{107,2});
    states[34] = new State(-108,new int[]{}, new int[]{108,2});
    states[35] = new State(new int[]{5,36},new int[]{}, new int[]{109,2});
    states[36] = new State(-109,new int[]{}, new int[]{109,3});
    states[37] = new State(new int[]{12,42,7,74,6,75,10,76,9,77,5,-128,4,-128,8,-128,11,-128,13,-128,14,-128,15,-128},new int[]{-31,38,-15,39,-11,41,-42,57,-12,70}, new int[]{95,1});
    states[38] = new State(-95,new int[]{}, new int[]{95,2});
    states[39] = new State(-124,new int[]{-40,40}, new int[]{102,2});
    states[40] = new State(new int[]{5,27,12,-102,7,-102,6,-102,10,-102,9,-102,4,-102,8,-102,11,-102,13,-102,14,-102,15,-102},new int[]{}, new int[]{102,3});
    states[41] = new State(-103,new int[]{}, new int[]{103,1});
    states[42] = new State(-6,new int[]{-4,43}, new int[]{64,1});
    states[43] = new State(new int[]{13,44,4,47,5,48,6,49,7,50,8,51,9,52,10,53,11,54,14,55,15,56,12,42},new int[]{-7,45,-11,46}, new int[]{64,2});
    states[44] = new State(-64,new int[]{}, new int[]{64,3});
    states[45] = new State(-7,new int[]{}, new int[]{7,2});
    states[46] = new State(-8,new int[]{}, new int[]{8,2});
    states[47] = new State(-29,new int[]{}, new int[]{29,1});
    states[48] = new State(-30,new int[]{}, new int[]{30,1});
    states[49] = new State(-31,new int[]{}, new int[]{31,1});
    states[50] = new State(-32,new int[]{}, new int[]{32,1});
    states[51] = new State(-33,new int[]{}, new int[]{33,1});
    states[52] = new State(-34,new int[]{}, new int[]{34,1});
    states[53] = new State(-35,new int[]{}, new int[]{35,1});
    states[54] = new State(-36,new int[]{}, new int[]{36,1});
    states[55] = new State(-37,new int[]{}, new int[]{37,1});
    states[56] = new State(-38,new int[]{}, new int[]{38,1});
    states[57] = new State(new int[]{5,58,4,60,6,61,7,62,8,63,9,64,10,65,11,66,13,67,14,68,15,69},new int[]{-5,59}, new int[]{104,1});
    states[58] = new State(-104,new int[]{}, new int[]{104,2});
    states[59] = new State(-129,new int[]{}, new int[]{129,2});
    states[60] = new State(-9,new int[]{}, new int[]{9,1});
    states[61] = new State(-10,new int[]{}, new int[]{10,1});
    states[62] = new State(-11,new int[]{}, new int[]{11,1});
    states[63] = new State(-12,new int[]{}, new int[]{12,1});
    states[64] = new State(-13,new int[]{}, new int[]{13,1});
    states[65] = new State(-14,new int[]{}, new int[]{14,1});
    states[66] = new State(-15,new int[]{}, new int[]{15,1});
    states[67] = new State(-16,new int[]{}, new int[]{16,1});
    states[68] = new State(-17,new int[]{}, new int[]{17,1});
    states[69] = new State(-18,new int[]{}, new int[]{18,1});
    states[70] = new State(-116,new int[]{-36,71}, new int[]{76,1});
    states[71] = new State(new int[]{7,74,6,75,10,76,9,77,11,78,8,79,14,80,15,81,4,82,5,-76,12,-76,13,-76},new int[]{-13,72,-12,73}, new int[]{76,2});
    states[72] = new State(-117,new int[]{}, new int[]{117,2});
    states[73] = new State(-69,new int[]{}, new int[]{69,1});
    states[74] = new State(-65,new int[]{}, new int[]{65,1});
    states[75] = new State(-66,new int[]{}, new int[]{66,1});
    states[76] = new State(-67,new int[]{}, new int[]{67,1});
    states[77] = new State(-68,new int[]{}, new int[]{68,1});
    states[78] = new State(-70,new int[]{}, new int[]{70,1});
    states[79] = new State(-71,new int[]{}, new int[]{71,1});
    states[80] = new State(-72,new int[]{}, new int[]{72,1});
    states[81] = new State(-73,new int[]{}, new int[]{73,1});
    states[82] = new State(-74,new int[]{}, new int[]{74,1});
    states[83] = new State(-124,new int[]{-40,84}, new int[]{101,1});
    states[84] = new State(new int[]{5,27,12,-101,7,-101,6,-101,10,-101,9,-101,4,-101,8,-101,11,-101,13,-101,14,-101,15,-101},new int[]{}, new int[]{101,2});
    states[85] = new State(-100,new int[]{}, new int[]{100,1});
    states[86] = new State(-127,new int[]{}, new int[]{127,1});
    states[87] = new State(new int[]{4,92,6,97},new int[]{-28,88,-16,91}, new int[]{93,1});
    states[88] = new State(new int[]{9,89},new int[]{}, new int[]{93,2});
    states[89] = new State(-124,new int[]{-40,90}, new int[]{93,3});
    states[90] = new State(new int[]{5,27,12,-93,7,-93,6,-93,10,-93,9,-93},new int[]{}, new int[]{93,4});
    states[91] = new State(-97,new int[]{}, new int[]{97,1});
    states[92] = new State(-4,new int[]{-3,93}, new int[]{77,1});
    states[93] = new State(new int[]{6,96,9,-77,5,-77,4,-110},new int[]{-33,94}, new int[]{77,2});
    states[94] = new State(new int[]{4,95},new int[]{}, new int[]{5,2});
    states[95] = new State(-5,new int[]{}, new int[]{5,3});
    states[96] = new State(-111,new int[]{}, new int[]{111,1});
    states[97] = new State(-98,new int[]{}, new int[]{98,1});
    states[98] = new State(-90,new int[]{}, new int[]{90,1});
    states[99] = new State(new int[]{12,100},new int[]{}, new int[]{63,1});
    states[100] = new State(-114,new int[]{-35,101}, new int[]{63,2});
    states[101] = new State(new int[]{10,102,4,105,5,106,6,107,7,108,8,109,9,110,11,111,12,112,13,113,14,114,15,115},new int[]{-8,104}, new int[]{63,3});
    states[102] = new State(new int[]{13,103},new int[]{}, new int[]{63,4});
    states[103] = new State(-63,new int[]{}, new int[]{63,5});
    states[104] = new State(-115,new int[]{}, new int[]{115,2});
    states[105] = new State(-39,new int[]{}, new int[]{39,1});
    states[106] = new State(-40,new int[]{}, new int[]{40,1});
    states[107] = new State(-41,new int[]{}, new int[]{41,1});
    states[108] = new State(-42,new int[]{}, new int[]{42,1});
    states[109] = new State(-43,new int[]{}, new int[]{43,1});
    states[110] = new State(-44,new int[]{}, new int[]{44,1});
    states[111] = new State(-45,new int[]{}, new int[]{45,1});
    states[112] = new State(-46,new int[]{}, new int[]{46,1});
    states[113] = new State(-47,new int[]{}, new int[]{47,1});
    states[114] = new State(-48,new int[]{}, new int[]{48,1});
    states[115] = new State(-49,new int[]{}, new int[]{49,1});
    states[116] = new State(-91,new int[]{}, new int[]{91,1});
    states[117] = new State(new int[]{5,118},new int[]{}, new int[]{92,1});
    states[118] = new State(-92,new int[]{}, new int[]{92,2});
    states[119] = new State(new int[]{14,125,15,126,4,128,10,133,5,148,2,149,11,-78},new int[]{-18,120,-20,121,-2,122,-19,127,-10,132,-21,147}, new int[]{78,1});
    states[120] = new State(-119,new int[]{}, new int[]{119,2});
    states[121] = new State(-79,new int[]{}, new int[]{79,1});
    states[122] = new State(new int[]{4,92},new int[]{-16,123}, new int[]{86,1});
    states[123] = new State(new int[]{5,124},new int[]{}, new int[]{86,2});
    states[124] = new State(-86,new int[]{}, new int[]{86,3});
    states[125] = new State(-2,new int[]{}, new int[]{2,1});
    states[126] = new State(-3,new int[]{}, new int[]{3,1});
    states[127] = new State(-80,new int[]{}, new int[]{80,1});
    states[128] = new State(-116,new int[]{-14,129,-36,131}, new int[]{85,1});
    states[129] = new State(new int[]{5,130},new int[]{}, new int[]{85,2});
    states[130] = new State(-85,new int[]{}, new int[]{85,3});
    states[131] = new State(new int[]{7,74,6,75,10,76,9,77,11,78,8,79,14,80,15,81,4,82,5,-75},new int[]{-13,72,-12,73}, new int[]{75,1});
    states[132] = new State(-81,new int[]{}, new int[]{81,1});
    states[133] = new State(new int[]{12,100,5,-120,4,-120,6,-120,7,-120,8,-120,9,-120,10,-120,11,-120,13,-120,14,-120,15,-120},new int[]{-38,134}, new int[]{63,1,87,1});
    states[134] = new State(new int[]{5,135,4,137,6,138,7,139,8,140,9,141,10,142,11,143,13,144,14,145,15,146},new int[]{-6,136}, new int[]{87,2});
    states[135] = new State(-87,new int[]{}, new int[]{87,3});
    states[136] = new State(-121,new int[]{}, new int[]{121,2});
    states[137] = new State(-19,new int[]{}, new int[]{19,1});
    states[138] = new State(-20,new int[]{}, new int[]{20,1});
    states[139] = new State(-21,new int[]{}, new int[]{21,1});
    states[140] = new State(-22,new int[]{}, new int[]{22,1});
    states[141] = new State(-23,new int[]{}, new int[]{23,1});
    states[142] = new State(-24,new int[]{}, new int[]{24,1});
    states[143] = new State(-25,new int[]{}, new int[]{25,1});
    states[144] = new State(-26,new int[]{}, new int[]{26,1});
    states[145] = new State(-27,new int[]{}, new int[]{27,1});
    states[146] = new State(-28,new int[]{}, new int[]{28,1});
    states[147] = new State(-82,new int[]{}, new int[]{82,1});
    states[148] = new State(-83,new int[]{}, new int[]{83,1});
    states[149] = new State(new int[]{5,150},new int[]{}, new int[]{84,1});
    states[150] = new State(-84,new int[]{}, new int[]{84,2});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-43, new int[]{-1,3});
    rules[2] = new Rule(-2, new int[]{14});
    rules[3] = new Rule(-2, new int[]{15});
    rules[4] = new Rule(-3, new int[]{});
    rules[5] = new Rule(-3, new int[]{-3,-33,4});
    rules[6] = new Rule(-4, new int[]{});
    rules[7] = new Rule(-4, new int[]{-4,-7});
    rules[8] = new Rule(-4, new int[]{-4,-11});
    rules[9] = new Rule(-5, new int[]{4});
    rules[10] = new Rule(-5, new int[]{6});
    rules[11] = new Rule(-5, new int[]{7});
    rules[12] = new Rule(-5, new int[]{8});
    rules[13] = new Rule(-5, new int[]{9});
    rules[14] = new Rule(-5, new int[]{10});
    rules[15] = new Rule(-5, new int[]{11});
    rules[16] = new Rule(-5, new int[]{13});
    rules[17] = new Rule(-5, new int[]{14});
    rules[18] = new Rule(-5, new int[]{15});
    rules[19] = new Rule(-6, new int[]{4});
    rules[20] = new Rule(-6, new int[]{6});
    rules[21] = new Rule(-6, new int[]{7});
    rules[22] = new Rule(-6, new int[]{8});
    rules[23] = new Rule(-6, new int[]{9});
    rules[24] = new Rule(-6, new int[]{10});
    rules[25] = new Rule(-6, new int[]{11});
    rules[26] = new Rule(-6, new int[]{13});
    rules[27] = new Rule(-6, new int[]{14});
    rules[28] = new Rule(-6, new int[]{15});
    rules[29] = new Rule(-7, new int[]{4});
    rules[30] = new Rule(-7, new int[]{5});
    rules[31] = new Rule(-7, new int[]{6});
    rules[32] = new Rule(-7, new int[]{7});
    rules[33] = new Rule(-7, new int[]{8});
    rules[34] = new Rule(-7, new int[]{9});
    rules[35] = new Rule(-7, new int[]{10});
    rules[36] = new Rule(-7, new int[]{11});
    rules[37] = new Rule(-7, new int[]{14});
    rules[38] = new Rule(-7, new int[]{15});
    rules[39] = new Rule(-8, new int[]{4});
    rules[40] = new Rule(-8, new int[]{5});
    rules[41] = new Rule(-8, new int[]{6});
    rules[42] = new Rule(-8, new int[]{7});
    rules[43] = new Rule(-8, new int[]{8});
    rules[44] = new Rule(-8, new int[]{9});
    rules[45] = new Rule(-8, new int[]{11});
    rules[46] = new Rule(-8, new int[]{12});
    rules[47] = new Rule(-8, new int[]{13});
    rules[48] = new Rule(-8, new int[]{14});
    rules[49] = new Rule(-8, new int[]{15});
    rules[50] = new Rule(-9, new int[]{4});
    rules[51] = new Rule(-9, new int[]{5});
    rules[52] = new Rule(-9, new int[]{6});
    rules[53] = new Rule(-9, new int[]{7});
    rules[54] = new Rule(-9, new int[]{8});
    rules[55] = new Rule(-9, new int[]{9});
    rules[56] = new Rule(-9, new int[]{10});
    rules[57] = new Rule(-9, new int[]{11});
    rules[58] = new Rule(-9, new int[]{12});
    rules[59] = new Rule(-9, new int[]{13});
    rules[60] = new Rule(-9, new int[]{14});
    rules[61] = new Rule(-9, new int[]{15});
    rules[62] = new Rule(-1, new int[]{-17,11,-22,11,-34});
    rules[63] = new Rule(-10, new int[]{10,12,-35,10,13});
    rules[64] = new Rule(-11, new int[]{12,-4,13});
    rules[65] = new Rule(-12, new int[]{7});
    rules[66] = new Rule(-12, new int[]{6});
    rules[67] = new Rule(-12, new int[]{10});
    rules[68] = new Rule(-12, new int[]{9});
    rules[69] = new Rule(-13, new int[]{-12});
    rules[70] = new Rule(-13, new int[]{11});
    rules[71] = new Rule(-13, new int[]{8});
    rules[72] = new Rule(-13, new int[]{14});
    rules[73] = new Rule(-13, new int[]{15});
    rules[74] = new Rule(-13, new int[]{4});
    rules[75] = new Rule(-14, new int[]{-36});
    rules[76] = new Rule(-15, new int[]{-12,-36});
    rules[77] = new Rule(-16, new int[]{4,-3});
    rules[78] = new Rule(-17, new int[]{-37});
    rules[79] = new Rule(-18, new int[]{-20});
    rules[80] = new Rule(-18, new int[]{-19});
    rules[81] = new Rule(-18, new int[]{-10});
    rules[82] = new Rule(-18, new int[]{-21});
    rules[83] = new Rule(-18, new int[]{5});
    rules[84] = new Rule(-18, new int[]{2,5});
    rules[85] = new Rule(-19, new int[]{4,-14,5});
    rules[86] = new Rule(-20, new int[]{-2,-16,5});
    rules[87] = new Rule(-21, new int[]{10,-38,5});
    rules[88] = new Rule(-22, new int[]{-39});
    rules[89] = new Rule(-23, new int[]{-25});
    rules[90] = new Rule(-23, new int[]{-10});
    rules[91] = new Rule(-23, new int[]{5});
    rules[92] = new Rule(-23, new int[]{2,5});
    rules[93] = new Rule(-24, new int[]{8,-28,9,-40});
    rules[94] = new Rule(-25, new int[]{-41,-40,-29});
    rules[95] = new Rule(-26, new int[]{-30,-31});
    rules[96] = new Rule(-27, new int[]{12,-32,13});
    rules[97] = new Rule(-28, new int[]{-16});
    rules[98] = new Rule(-28, new int[]{6});
    rules[99] = new Rule(-29, new int[]{-27});
    rules[100] = new Rule(-29, new int[]{-26});
    rules[101] = new Rule(-30, new int[]{-15,-40});
    rules[102] = new Rule(-30, new int[]{-30,-15,-40});
    rules[103] = new Rule(-31, new int[]{-11});
    rules[104] = new Rule(-31, new int[]{-42,5});
    rules[105] = new Rule(-32, new int[]{});
    rules[106] = new Rule(-32, new int[]{-32,-27});
    rules[107] = new Rule(-32, new int[]{-32,-26});
    rules[108] = new Rule(-32, new int[]{-32,5});
    rules[109] = new Rule(-32, new int[]{-32,2,5});
    rules[110] = new Rule(-33, new int[]{});
    rules[111] = new Rule(-33, new int[]{6});
    rules[112] = new Rule(-34, new int[]{});
    rules[113] = new Rule(-34, new int[]{-34,-9});
    rules[114] = new Rule(-35, new int[]{});
    rules[115] = new Rule(-35, new int[]{-35,-8});
    rules[116] = new Rule(-36, new int[]{});
    rules[117] = new Rule(-36, new int[]{-36,-13});
    rules[118] = new Rule(-37, new int[]{});
    rules[119] = new Rule(-37, new int[]{-37,-18});
    rules[120] = new Rule(-38, new int[]{});
    rules[121] = new Rule(-38, new int[]{-38,-6});
    rules[122] = new Rule(-39, new int[]{});
    rules[123] = new Rule(-39, new int[]{-39,-23});
    rules[124] = new Rule(-40, new int[]{});
    rules[125] = new Rule(-40, new int[]{-40,5});
    rules[126] = new Rule(-41, new int[]{});
    rules[127] = new Rule(-41, new int[]{-24});
    rules[128] = new Rule(-42, new int[]{});
    rules[129] = new Rule(-42, new int[]{-42,-5});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    CurrentSemanticValue = new ValueType();
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // _8 -> tkPCX
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 3: // _8 -> tkPCS
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 4: // _7 -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 5: // _7 -> _7, _Sign_opt, ID
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-3].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-3].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 6: // _ -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 7: // _ -> _, _ANY4
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 8: // _ -> _, ContextCode
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 9: // _ANY6 -> ID
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 10: // _ANY6 -> Sign
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 11: // _ANY6 -> RegexItem
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 12: // _ANY6 -> tkLT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 13: // _ANY6 -> tkGT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 14: // _ANY6 -> tkPC
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 15: // _ANY6 -> tkPC2
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 16: // _ANY6 -> tkBClose
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 17: // _ANY6 -> tkPCX
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 18: // _ANY6 -> tkPCS
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 19: // _ANY5 -> ID
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 20: // _ANY5 -> Sign
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 21: // _ANY5 -> RegexItem
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 22: // _ANY5 -> tkLT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 23: // _ANY5 -> tkGT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 24: // _ANY5 -> tkPC
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 25: // _ANY5 -> tkPC2
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 26: // _ANY5 -> tkBClose
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 27: // _ANY5 -> tkPCX
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 28: // _ANY5 -> tkPCS
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 29: // _ANY4 -> ID
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 30: // _ANY4 -> NL
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 31: // _ANY4 -> Sign
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 32: // _ANY4 -> RegexItem
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 33: // _ANY4 -> tkLT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 34: // _ANY4 -> tkGT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 35: // _ANY4 -> tkPC
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 36: // _ANY4 -> tkPC2
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 37: // _ANY4 -> tkPCX
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 38: // _ANY4 -> tkPCS
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 39: // _ANY3 -> ID
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 40: // _ANY3 -> NL
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 41: // _ANY3 -> Sign
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 42: // _ANY3 -> RegexItem
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 43: // _ANY3 -> tkLT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 44: // _ANY3 -> tkGT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 45: // _ANY3 -> tkPC2
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 46: // _ANY3 -> tkBOpen
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 47: // _ANY3 -> tkBClose
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 48: // _ANY3 -> tkPCX
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 49: // _ANY3 -> tkPCS
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 50: // _ANY -> ID
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 51: // _ANY -> NL
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 52: // _ANY -> Sign
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 53: // _ANY -> RegexItem
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 54: // _ANY -> tkLT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 55: // _ANY -> tkGT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 56: // _ANY -> tkPC
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 57: // _ANY -> tkPC2
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 58: // _ANY -> tkBOpen
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 59: // _ANY -> tkBClose
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 60: // _ANY -> tkPCX
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 61: // _ANY -> tkPCS
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 62: // Program -> Section1, tkPC2, Section2, tkPC2, __ANY_list
{
		CurrentSemanticValue.type_Program = new Program(new List<string>(), LocationStack[LocationStack.Depth-5].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Program.Location;
		CurrentSemanticValue.type_Program.Value.Add("Program");
		CurrentSemanticValue.type_Program.AddItem(ValueStack[ValueStack.Depth-5].type_Section1);
		CurrentSemanticValue.type_Program.AddItem(ValueStack[ValueStack.Depth-3].type_Section2);
		root = CurrentSemanticValue.type_Program;
	}
        break;
      case 63: // DirectCode -> tkPC, tkBOpen, __ANY3_list, tkPC, tkBClose
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-5].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.Value.Add("DirectCode");

	}
        break;
      case 64: // ContextCode -> tkBOpen, _, tkBClose
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.Value.Add("ContextCode");

	}
        break;
      case 65: // RegexHead -> RegexItem
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 66: // RegexHead -> Sign
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 67: // RegexHead -> tkPC
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 68: // RegexHead -> tkGT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 69: // RegexTail -> RegexHead
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 70: // RegexTail -> tkPC2
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 71: // RegexTail -> tkLT
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 72: // RegexTail -> tkPCX
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 73: // RegexTail -> tkPCS
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 74: // RegexTail -> ID
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 75: // Regex1 -> _RegexTail_list
{
		CurrentSemanticValue.type_Regex1 = new Regex1(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Regex1.Location;
		CurrentSemanticValue.type_Regex1.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 76: // Regex2 -> RegexHead, _RegexTail_list
{
		CurrentSemanticValue.type_Regex2 = new Regex2(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Regex2.Location;
		CurrentSemanticValue.type_Regex2.AddValue(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_Regex2.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 77: // IdList -> ID, _7
{
		CurrentSemanticValue.type_IdList = new IdList(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_IdList.Location;
		CurrentSemanticValue.type_IdList.AddValue(ValueStack[ValueStack.Depth-2].type_Token);
		CurrentSemanticValue.type_IdList.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);
		CurrentSemanticValue.type_IdList.AddItem(ValueStack[ValueStack.Depth-2].type_Token);
		CurrentSemanticValue.type_IdList.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 78: // Section1 -> _Section1Item_list
{
		CurrentSemanticValue.type_Section1 = new Section1(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Section1.Location;
		CurrentSemanticValue.type_Section1.Value.Add("Section1");
		CurrentSemanticValue.type_Section1.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 79: // Section1Item -> StateDecl
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_StateDecl);
errBegin = CurrentLocationSpan;
	}
        break;
      case 80: // Section1Item -> RegexDecl
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_RegexDecl);
errBegin = CurrentLocationSpan;
	}
        break;
      case 81: // Section1Item -> DirectCode
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    errBegin = CurrentLocationSpan;
}
        break;
      case 82: // Section1Item -> PercentDecl
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    errBegin = CurrentLocationSpan;
}
        break;
      case 83: // Section1Item -> NL
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    errBegin = CurrentLocationSpan;
}
        break;
      case 84: // Section1Item -> error, NL
{
        CurrentLocationSpan = new LexLocation(errBegin.EndLine, errBegin.EndColumn, LocationStack[LocationStack.Depth-1].StartLine, LocationStack[LocationStack.Depth-1].StartColumn);
        LEX_TreeNode err = new LEX_TreeNode((Scanner as Scanner).errorMsg, CurrentLocationSpan);
        Errors.Add(err);
        errBegin = CurrentLocationSpan;
    }
        break;
      case 85: // RegexDecl -> ID, Regex1, NL
{
		CurrentSemanticValue.type_RegexDecl = new RegexDecl(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_RegexDecl.Location;
		CurrentSemanticValue.type_RegexDecl.AddValue(ValueStack[ValueStack.Depth-3].type_Token);
		CurrentSemanticValue.type_RegexDecl.AddItem(ValueStack[ValueStack.Depth-2].type_Regex1);

	}
        break;
      case 86: // StateDecl -> _8, IdList, NL
{
		CurrentSemanticValue.type_StateDecl = new StateDecl(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_StateDecl.Location;
		CurrentSemanticValue.type_StateDecl.AddValue(ValueStack[ValueStack.Depth-3].type_LEX_TreeNode);
		CurrentSemanticValue.type_StateDecl.AddItem(ValueStack[ValueStack.Depth-2].type_IdList);

	}
        break;
      case 87: // PercentDecl -> tkPC, __ANY5_list, NL
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);

	}
        break;
      case 88: // Section2 -> _Section2Item_list
{
		CurrentSemanticValue.type_Section2 = new Section2(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Section2.Location;
		CurrentSemanticValue.type_Section2.Value.Add("Section2");
		CurrentSemanticValue.type_Section2.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 89: // Section2Item -> RuleOrGroup
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_RuleOrGroup);
errBegin = CurrentLocationSpan;
	}
        break;
      case 90: // Section2Item -> DirectCode
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    errBegin = CurrentLocationSpan;
}
        break;
      case 91: // Section2Item -> NL
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    errBegin = CurrentLocationSpan;
}
        break;
      case 92: // Section2Item -> error, NL
{
        CurrentLocationSpan = new LexLocation(errBegin.EndLine, errBegin.EndColumn, LocationStack[LocationStack.Depth-1].StartLine, LocationStack[LocationStack.Depth-1].StartColumn);
        LEX_TreeNode err = new LEX_TreeNode((Scanner as Scanner).errorMsg, CurrentLocationSpan);
        Errors.Add(err);
        errBegin = CurrentLocationSpan;
    }
        break;
      case 93: // States -> tkLT, _9, tkGT, _NL_list
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-4].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-3].type_LEX_TreeNode);

	}
        break;
      case 94: // RuleOrGroup -> _States_opt, _NL_list, _10
{
		CurrentSemanticValue.type_RuleOrGroup = new RuleOrGroup(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_RuleOrGroup.Location;
		CurrentSemanticValue.type_RuleOrGroup.AddValue(ValueStack[ValueStack.Depth-3].type_LEX_TreeNode);
		CurrentSemanticValue.type_RuleOrGroup.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 95: // LexRule -> _11, _12
{
		CurrentSemanticValue.type_LexRule = new LexRule(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LexRule.Location;
		CurrentSemanticValue.type_LexRule.AddValue(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LexRule.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);

	}
        break;
      case 96: // Group -> tkBOpen, _13, tkBClose
{
		CurrentSemanticValue.type_Group = new Group(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_Group.Location;
		CurrentSemanticValue.type_Group.Value.Add("Group");
		CurrentSemanticValue.type_Group.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);

	}
        break;
      case 97: // _9 -> IdList
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_IdList);

	}
        break;
      case 98: // _9 -> Sign
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 99: // _10 -> Group
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Group);

	}
        break;
      case 100: // _10 -> LexRule
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_LexRule);

	}
        break;
      case 101: // _11 -> Regex2, _NL_list
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_Regex2);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-2].type_Regex2);

	}
        break;
      case 102: // _11 -> _11, Regex2, _NL_list
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-3].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_Regex2);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-3].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-2].type_Regex2);

	}
        break;
      case 103: // _12 -> ContextCode
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 104: // _12 -> __ANY6_list, NL
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 105: // _13 -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    errBegin = CurrentLocationSpan;
}
        break;
      case 106: // _13 -> _13, Group
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Group);
errBegin = CurrentLocationSpan;
	}
        break;
      case 107: // _13 -> _13, LexRule
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_LexRule);
errBegin = CurrentLocationSpan;
	}
        break;
      case 108: // _13 -> _13, NL
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
errBegin = CurrentLocationSpan;
	}
        break;
      case 109: // _13 -> _13, error, NL
{
        CurrentLocationSpan = new LexLocation(errBegin.EndLine, errBegin.EndColumn, LocationStack[LocationStack.Depth-1].StartLine, LocationStack[LocationStack.Depth-1].StartColumn);
        LEX_TreeNode err = new LEX_TreeNode((Scanner as Scanner).errorMsg, CurrentLocationSpan);
        Errors.Add(err);
        errBegin = CurrentLocationSpan;
    }
        break;
      case 110: // _Sign_opt -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 111: // _Sign_opt -> Sign
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 112: // __ANY_list -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 113: // __ANY_list -> __ANY_list, _ANY
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 114: // __ANY3_list -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 115: // __ANY3_list -> __ANY3_list, _ANY3
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 116: // _RegexTail_list -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 117: // _RegexTail_list -> _RegexTail_list, RegexTail
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 118: // _Section1Item_list -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 119: // _Section1Item_list -> _Section1Item_list, Section1Item
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 120: // __ANY5_list -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 121: // __ANY5_list -> __ANY5_list, _ANY5
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 122: // _Section2Item_list -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 123: // _Section2Item_list -> _Section2Item_list, Section2Item
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 124: // _NL_list -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 125: // _NL_list -> _NL_list, NL
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_Token);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddItem(ValueStack[ValueStack.Depth-1].type_Token);

	}
        break;
      case 126: // _States_opt -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 127: // _States_opt -> States
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
      case 128: // __ANY6_list -> /* empty */
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 129: // __ANY6_list -> __ANY6_list, _ANY6
{
		CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode(new List<string>(), LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
        CurrentLocationSpan = CurrentSemanticValue.type_LEX_TreeNode.Location;
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddValue(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-2].type_LEX_TreeNode);
		CurrentSemanticValue.type_LEX_TreeNode.AddSubItems(ValueStack[ValueStack.Depth-1].type_LEX_TreeNode);

	}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

public LexLocation errBegin = new LexLocation(1,0,1,0);
public List<SourceEntity> Errors = new List<SourceEntity>();
}
}
