// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  BLUEGENE
// DateTime: 25.08.2015 17:33:42
// UserName: MikhailoMMX
// Input file <Grammar.y - 11.09.2014 14:58:28>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AspectCore;

namespace LWParser
{
public enum Tokens {error=2,EOF=3,LetterDigit=4,SIGN=5,STRING=6,
    tkNamespaceOrClass=7,tkSemicolon=8,LBRACE=9,RBRACE=10};

public partial class ValueType
{ 
  public string sVal;  
  public List<string> sList;
  public SourceEntity se;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[15];
  private static State[] states = new State[21];
  private static string[] nonTerms = new string[] {
      "Program", "TokenList", "Token", "ProgramNode", "ProgramNodeList", "$accept", 
      "Anon@1", };

  static Parser() {
    states[0] = new State(-3,new int[]{-1,1,-5,3}, new int[]{1,0});
    states[1] = new State(new int[]{3,2},new int[]{}, new int[]{1,1});
    states[2] = new State(-1,new int[]{}, new int[]{1,2});
    states[3] = new State(new int[]{2,5,3,-2,8,-10,9,-10,7,-10,5,-10,4,-10,6,-10},new int[]{-4,4,-2,6}, new int[]{2,1});
    states[4] = new State(-4,new int[]{}, new int[]{4,2});
    states[5] = new State(-5,new int[]{}, new int[]{5,1});
    states[6] = new State(new int[]{8,7,9,9,7,15,5,12,4,13,6,14},new int[]{-3,8}, new int[]{6,1,7,1,9,1});
    states[7] = new State(-6,new int[]{}, new int[]{6,2});
    states[8] = new State(-11,new int[]{}, new int[]{11,2});
    states[9] = new State(-10,new int[]{-2,10}, new int[]{7,2});
    states[10] = new State(new int[]{10,11,5,12,4,13,6,14},new int[]{-3,8}, new int[]{7,3});
    states[11] = new State(-7,new int[]{}, new int[]{7,4});
    states[12] = new State(-12,new int[]{}, new int[]{12,1});
    states[13] = new State(-13,new int[]{}, new int[]{13,1});
    states[14] = new State(-14,new int[]{}, new int[]{14,1});
    states[15] = new State(-10,new int[]{-2,16}, new int[]{9,2});
    states[16] = new State(new int[]{9,17,5,12,4,13,6,14},new int[]{-3,8}, new int[]{9,3});
    states[17] = new State(-8,new int[]{-7,18}, new int[]{9,4});
    states[18] = new State(-3,new int[]{-5,19}, new int[]{9,5});
    states[19] = new State(new int[]{10,20,2,5,8,-10,9,-10,7,-10,5,-10,4,-10,6,-10},new int[]{-4,4,-2,6}, new int[]{9,6});
    states[20] = new State(-9,new int[]{}, new int[]{9,7});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-6, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-5});
    rules[3] = new Rule(-5, new int[]{});
    rules[4] = new Rule(-5, new int[]{-5,-4});
    rules[5] = new Rule(-4, new int[]{2});
    rules[6] = new Rule(-4, new int[]{-2,8});
    rules[7] = new Rule(-4, new int[]{-2,9,-2,10});
    rules[8] = new Rule(-7, new int[]{});
    rules[9] = new Rule(-4, new int[]{-2,7,-2,9,-7,-5,10});
    rules[10] = new Rule(-2, new int[]{});
    rules[11] = new Rule(-2, new int[]{-2,-3});
    rules[12] = new Rule(-3, new int[]{5});
    rules[13] = new Rule(-3, new int[]{4});
    rules[14] = new Rule(-3, new int[]{6});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    CurrentSemanticValue = new ValueType();
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> ProgramNodeList
{
		root = ValueStack[ValueStack.Depth-1].se;
	}
        break;
      case 3: // ProgramNodeList -> /* empty */
{ 
		CurrentSemanticValue.se = new SourceEntity();
	}
        break;
      case 4: // ProgramNodeList -> ProgramNodeList, ProgramNode
{
		CurrentSemanticValue.se = ValueStack[ValueStack.Depth-2].se;
		if (ValueStack[ValueStack.Depth-1].se == null)
			return;
		ValueStack[ValueStack.Depth-2].se.Items.Add(ValueStack[ValueStack.Depth-1].se);
		if (CurrentSemanticValue.se.Location == null)
			CurrentSemanticValue.se.Location = LocationStack[LocationStack.Depth-1];
		else
			CurrentSemanticValue.se.Location = CurrentSemanticValue.se.Location.Merge(ValueStack[ValueStack.Depth-1].se.Location);
	}
        break;
      case 5: // ProgramNode -> error
{
		// îøèáêà - òîæå ñóùíîñòü!
		if (NextToken == (int)Tokens.EOF && NestingLevel > 0)
            NextToken = (int)Tokens.RBRACE;
		//"Scanner as Scanner": {1} - Property, {2} - class
		(Scanner as Scanner).ResetEnteringContainer();
	}
        break;
      case 6: // ProgramNode -> TokenList, tkSemicolon
{ 
		//ïîëå è âñå òàêîå
		CurrentSemanticValue.se = new SourceEntity(ValueStack[ValueStack.Depth-2].sList, LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
	}
        break;
      case 7: // ProgramNode -> TokenList, LBRACE, TokenList, RBRACE
{
		// Ìåòîä
		CurrentSemanticValue.se = new SourceEntity(ValueStack[ValueStack.Depth-4].sList, LocationStack[LocationStack.Depth-4].Merge(LocationStack[LocationStack.Depth-1]));
	}
        break;
      case 8: // Anon@1 -> /* empty */
{NestingLevel +=1;}
        break;
      case 9: // ProgramNode -> TokenList, tkNamespaceOrClass, TokenList, LBRACE, Anon@1, 
              //                ProgramNodeList, RBRACE
{
		//Ïðîñòðàíñòâî èìåí èëè êëàññ
		ValueStack[ValueStack.Depth-5].sList.Insert(0, ValueStack[ValueStack.Depth-6].sVal);
		CurrentSemanticValue.se = new SourceEntity(ValueStack[ValueStack.Depth-5].sList, LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-1]));
		CurrentSemanticValue.se.Items = ValueStack[ValueStack.Depth-2].se.Items;
		NestingLevel -= 1;
	}
        break;
      case 10: // TokenList -> /* empty */
{
		CurrentSemanticValue.sList = new List<string>();
	}
        break;
      case 11: // TokenList -> TokenList, Token
{
			if (ValueStack[ValueStack.Depth-1].sVal != null)
				ValueStack[ValueStack.Depth-2].sList.Add(ValueStack[ValueStack.Depth-1].sVal);
			CurrentSemanticValue.sList = ValueStack[ValueStack.Depth-2].sList;
		}
        break;
      case 12: // Token -> SIGN
{CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal;}
        break;
      case 13: // Token -> LetterDigit
{CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal;}
        break;
      case 14: // Token -> STRING
{CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal;}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


private int NestingLevel = 0;
}
}
