// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  BLUEGENE
// DateTime: 25.08.2015 17:34:49
// UserName: MikhailoMMX
// Input file <LWParser.y - 25.08.2015 17:34:48>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AspectCore;

namespace LWLex
{
public enum Tokens {error=2,EOF=3,_b1=4,_b2=5,_c=6};

public partial class ValueType
{ 
  public SourceEntity type_SourceEntity;
  public LEX_TreeNode type_LEX_TreeNode;
  public Token type_Token;
  public SourceEntityUniformSet type_SourceEntityUniformSet;

}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[6];
  private static State[] states = new State[10];
  private static string[] nonTerms = new string[] {
      "Program", "B", "A", "C", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{4,5},new int[]{-1,1,-3,3,-4,7,-2,8}, new int[]{1,0});
    states[1] = new State(new int[]{3,2},new int[]{}, new int[]{1,1});
    states[2] = new State(-1,new int[]{}, new int[]{1,2});
    states[3] = new State(new int[]{4,5},new int[]{-2,4}, new int[]{2,1});
    states[4] = new State(-2,new int[]{}, new int[]{2,2});
    states[5] = new State(new int[]{5,6},new int[]{}, new int[]{3,1});
    states[6] = new State(-3,new int[]{}, new int[]{3,2});
    states[7] = new State(-4,new int[]{}, new int[]{4,1});
    states[8] = new State(new int[]{6,9},new int[]{}, new int[]{5,1});
    states[9] = new State(-5,new int[]{}, new int[]{5,2});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-5, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,-2});
    rules[3] = new Rule(-2, new int[]{4,5});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-4, new int[]{-2,6});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    CurrentSemanticValue = new ValueType();
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> A, B
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 3: // B -> _b1, _b2
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 4: // A -> C
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
      case 5: // C -> B, _c
{ CurrentSemanticValue.type_LEX_TreeNode = new LEX_TreeNode();
    if (CurrentLocationSpan == null)
        CurrentLocationSpan = new LexLocation(1,0,1,0); 
    
}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

public LexLocation errBegin = new LexLocation(1,0,1,0);
public List<SourceEntity> Errors = new List<SourceEntity>();
}
}
